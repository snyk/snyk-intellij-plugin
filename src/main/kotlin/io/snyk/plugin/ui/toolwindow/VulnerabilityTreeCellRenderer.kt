package io.snyk.plugin.ui.toolwindow

import ai.deepcode.javaclient.core.SuggestionForFile
import com.intellij.openapi.components.service
import com.intellij.openapi.util.Iconable
import com.intellij.psi.PsiFile
import com.intellij.ui.ColoredTreeCellRenderer
import com.intellij.ui.SimpleTextAttributes
import com.intellij.util.IconUtil
import com.intellij.util.ui.UIUtil
import icons.SnykIcons
import io.snyk.plugin.cli.CliVulnerabilitiesForFile
import io.snyk.plugin.cli.Vulnerability
import io.snyk.plugin.getApplicationSettingsStateService
import io.snyk.plugin.snykcode.core.AnalysisData
import io.snyk.plugin.snykcode.severityAsString
import io.snyk.plugin.ui.PackageManagerIconProvider
import io.snyk.plugin.ui.snykCodeAvailabilityPostfix
import java.awt.Color
import javax.swing.Icon
import javax.swing.JTree

class VulnerabilityTreeCellRenderer : ColoredTreeCellRenderer() {
    override fun customizeCellRenderer(
        tree: JTree,
        value: Any,
        selected: Boolean,
        expanded: Boolean,
        leaf: Boolean,
        row: Int,
        hasFocus: Boolean
    ) {

        var nodeIcon: Icon? = null
        var text: String? = null
        var attributes = SimpleTextAttributes.REGULAR_ATTRIBUTES
        when (value) {
            is VulnerabilityTreeNode -> {
                val vulnerability = (value.userObject as Collection<Vulnerability>).first()
                nodeIcon = SnykIcons.getSeverityIcon(vulnerability.severity)
                text = vulnerability.getPackageNameTitle()

                val toolWindowPanel = value.project.service<SnykToolWindowPanel>()
                if (toolWindowPanel.currentCliResults == null) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    nodeIcon = getDisabledIcon(nodeIcon)
                }
            }
            is FileTreeNode -> {
                val cliVulnerabilitiesForFile = value.userObject as CliVulnerabilitiesForFile
                nodeIcon = PackageManagerIconProvider.getIcon(cliVulnerabilitiesForFile.packageManager.toLowerCase())
                text = cliVulnerabilitiesForFile.displayTargetFile

                val toolWindowPanel = value.project.service<SnykToolWindowPanel>()
                if (toolWindowPanel.currentCliResults == null) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    text += " (obsolete)"
                    nodeIcon = getDisabledIcon(nodeIcon)
                }
            }
            is SuggestionTreeNode -> {
                val (suggestion, index) = value.userObject as Pair<SuggestionForFile, Int>
                nodeIcon = SnykIcons.getSeverityIcon(suggestion.severityAsString)
                val range = suggestion.ranges[index]
                text = "line ${range.startRow}: ${
                    if (suggestion.title.isNullOrEmpty()) suggestion.message else suggestion.title
                }"
                val parentFileNode = value.parent as SnykCodeFileTreeNode
                if (!AnalysisData.instance.isFileInCache(parentFileNode.userObject as PsiFile)) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    nodeIcon = getDisabledIcon(nodeIcon)
                }
            }
            is SnykCodeFileTreeNode -> {
                val file = value.userObject as PsiFile
                nodeIcon = file.getIcon(Iconable.ICON_FLAG_READ_STATUS)
                text = file.name
                if (!AnalysisData.instance.isFileInCache(file)) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    text += " (obsolete)"
                    nodeIcon = getDisabledIcon(nodeIcon)
                }
            }
            is RootCliTreeNode -> {
                val settings = getApplicationSettingsStateService()
                if (!settings.cliScanEnable) {
                    nodeIcon = SnykIcons.OPEN_SOURCE_SECURITY_DISABLED
                    text = SnykToolWindowPanel.CLI_ROOT_TEXT + " (disabled)"
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                } else {
                    nodeIcon = SnykIcons.OPEN_SOURCE_SECURITY
                    text = value.userObject.toString()
                    attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES
                }
            }
            is RootSecurityIssuesTreeNode -> {
                val settings = getApplicationSettingsStateService()
                if (!settings.snykCodeSecurityIssuesScanEnable) {
                    nodeIcon = SnykIcons.SNYK_CODE_DISABLED
                    val availabilityPostfix = snykCodeAvailabilityPostfix()
                    text = SnykToolWindowPanel.SNYKCODE_SECURITY_ISSUES_ROOT_TEXT + availabilityPostfix.ifEmpty { " (disabled)" }
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                } else {
                    nodeIcon = SnykIcons.SNYK_CODE
                    text = value.userObject.toString()
                    attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES
                }
            }
            is RootQualityIssuesTreeNode -> {
                val settings = getApplicationSettingsStateService()
                if (!settings.snykCodeQualityIssuesScanEnable) {
                    nodeIcon = SnykIcons.SNYK_CODE_DISABLED
                    val availabilityPostfix = snykCodeAvailabilityPostfix()
                    text = SnykToolWindowPanel.SNYKCODE_QUALITY_ISSUES_ROOT_TEXT + availabilityPostfix.ifEmpty { " (disabled)" }
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                } else {
                    nodeIcon = SnykIcons.SNYK_CODE
                    text = value.userObject.toString()
                    attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES
                }
            }
        }
        icon = nodeIcon
        font = UIUtil.getTreeFont()
        text?.let { append(it, attributes) }
    }

    private fun getDisabledIcon(originalIcon: Icon?) =
        originalIcon?.let { IconUtil.colorize(it, Color.LIGHT_GRAY) }

    companion object {
        private val GRAYED_STRIKEOUT_ATTRIBUTES =
            SimpleTextAttributes(SimpleTextAttributes.STYLE_STRIKEOUT, UIUtil.getInactiveTextColor())
    }
}
