package io.snyk.plugin.ui.toolwindow

import ai.deepcode.javaclient.core.SuggestionForFile
import com.intellij.openapi.util.Iconable
import com.intellij.ui.ColoredTreeCellRenderer
import com.intellij.ui.SimpleTextAttributes
import com.intellij.util.IconUtil
import com.intellij.util.ui.UIUtil
import icons.SnykIcons
import io.snyk.plugin.getSnykToolWindowPanel
import io.snyk.plugin.pluginSettings
import io.snyk.plugin.snykcode.core.AnalysisData
import io.snyk.plugin.snykcode.core.PDU
import io.snyk.plugin.snykcode.severityAsString
import io.snyk.plugin.ui.PackageManagerIconProvider
import io.snyk.plugin.ui.snykCodeAvailabilityPostfix
import snyk.container.ContainerIssue
import snyk.container.ContainerIssuesForImage
import snyk.container.ui.ContainerImageTreeNode
import snyk.container.ui.ContainerIssueTreeNode
import snyk.iac.IacIssue
import snyk.iac.IacIssuesForFile
import snyk.iac.ui.toolwindow.IacFileTreeNode
import snyk.iac.ui.toolwindow.IacIssueTreeNode
import snyk.oss.OssVulnerabilitiesForFile
import snyk.oss.Vulnerability
import java.awt.Color
import javax.swing.Icon
import javax.swing.JTree

class VulnerabilityTreeCellRenderer : ColoredTreeCellRenderer() {
    override fun customizeCellRenderer(
        tree: JTree,
        value: Any,
        selected: Boolean,
        expanded: Boolean,
        leaf: Boolean,
        row: Int,
        hasFocus: Boolean
    ) {

        var nodeIcon: Icon? = null
        var text: String? = null
        var attributes = SimpleTextAttributes.REGULAR_ATTRIBUTES
        when (value) {
            is VulnerabilityTreeNode -> {
                val vulnerability = (value.userObject as Collection<Vulnerability>).first()
                nodeIcon = SnykIcons.getSeverityIcon(vulnerability.severity)
                text = vulnerability.getPackageNameTitle()

                val toolWindowPanel = getSnykToolWindowPanel(value.project)
                if (toolWindowPanel?.currentOssResults == null) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    nodeIcon = getDisabledIcon(nodeIcon)
                }
            }
            is FileTreeNode -> {
                val ossVulnerabilitiesForFile = value.userObject as OssVulnerabilitiesForFile
                nodeIcon = PackageManagerIconProvider.getIcon(ossVulnerabilitiesForFile.packageManager.toLowerCase())
                text = ossVulnerabilitiesForFile.displayTargetFile

                val toolWindowPanel = getSnykToolWindowPanel(value.project)
                if (toolWindowPanel?.currentOssResults == null) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    text += obsoleteSuffix
                    nodeIcon = getDisabledIcon(nodeIcon)
                }
            }
            is SuggestionTreeNode -> {
                val (suggestion, index) = value.userObject as Pair<SuggestionForFile, Int>
                nodeIcon = SnykIcons.getSeverityIcon(suggestion.severityAsString)
                val range = suggestion.ranges[index]
                text = "line ${range.startRow}: ${
                    if (suggestion.title.isNullOrEmpty()) suggestion.message else suggestion.title
                }"
                val parentFileNode = value.parent as SnykCodeFileTreeNode
                if (!AnalysisData.instance.isFileInCache(parentFileNode.userObject)) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    nodeIcon = getDisabledIcon(nodeIcon)
                }
            }
            is SnykCodeFileTreeNode -> {
                val file = value.userObject
                text = PDU.toSnykCodeFile(file).virtualFile.name
                val psiFile = PDU.toPsiFile(file)
                nodeIcon = psiFile?.getIcon(Iconable.ICON_FLAG_READ_STATUS)
                if (!AnalysisData.instance.isFileInCache(file)) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    text += obsoleteSuffix
                    nodeIcon = getDisabledIcon(nodeIcon)
                }
            }
            is IacFileTreeNode -> {
                val iacVulnerabilitiesForFile = value.userObject as IacIssuesForFile
                nodeIcon = PackageManagerIconProvider.getIcon(iacVulnerabilitiesForFile.packageManager.toLowerCase())
                text = iacVulnerabilitiesForFile.targetFile

                val toolWindowPanel = getSnykToolWindowPanel(value.project)
                if (toolWindowPanel?.currentIacResult == null || iacVulnerabilitiesForFile.obsolete) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    nodeIcon = getDisabledIcon(nodeIcon)
                    text += obsoleteSuffix
                }
            }
            is ContainerImageTreeNode -> {
                val issuesForImage = value.userObject as ContainerIssuesForImage
                nodeIcon = SnykIcons.CONTAINER_IMAGE
                text = issuesForImage.imageName

                val toolWindowPanel = getSnykToolWindowPanel(value.project)
                if (toolWindowPanel?.currentContainerResult == null || issuesForImage.obsolete) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    nodeIcon = getDisabledIcon(nodeIcon)
                    text += obsoleteSuffix
                }
            }
            is IacIssueTreeNode -> {
                val issue = (value.userObject as IacIssue)
                val toolWindowPanel = getSnykToolWindowPanel(value.project)
                nodeIcon = SnykIcons.getSeverityIcon(issue.severity)
                val prefix = if (issue.lineNumber > 0) "line ${issue.lineNumber}: " else ""
                text = prefix + issue.title + when {
                    issue.ignored -> ignoredSuffix
                    toolWindowPanel?.currentIacResult == null || issue.obsolete -> obsoleteSuffix
                    else -> ""
                }
                if (toolWindowPanel?.currentIacResult == null || issue.ignored || issue.obsolete) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    nodeIcon = getDisabledIcon(nodeIcon)
                }
            }
            is ContainerIssueTreeNode -> {
                val issue = value.userObject as ContainerIssue
                val toolWindowPanel = getSnykToolWindowPanel(value.project)
                nodeIcon = SnykIcons.getSeverityIcon(issue.severity)
                text = issue.title + when {
                    issue.ignored -> ignoredSuffix
                    toolWindowPanel?.currentContainerResult == null || issue.obsolete -> obsoleteSuffix
                    else -> ""
                }
                if (toolWindowPanel?.currentContainerResult == null || issue.ignored || issue.obsolete) {
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                    nodeIcon = getDisabledIcon(nodeIcon)
                }
            }
            is RootOssTreeNode -> {
                val settings = pluginSettings()
                if (!settings.ossScanEnable) {
                    nodeIcon = SnykIcons.OPEN_SOURCE_SECURITY_DISABLED
                    text = SnykToolWindowPanel.OSS_ROOT_TEXT + disabledSuffix
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                } else {
                    nodeIcon = SnykIcons.OPEN_SOURCE_SECURITY
                    text = value.userObject.toString()
                    attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES
                }
            }
            is RootSecurityIssuesTreeNode -> {
                val settings = pluginSettings()
                if (!settings.snykCodeSecurityIssuesScanEnable) {
                    nodeIcon = SnykIcons.SNYK_CODE_DISABLED
                    val availabilityPostfix = snykCodeAvailabilityPostfix()
                    text = SnykToolWindowPanel.SNYKCODE_SECURITY_ISSUES_ROOT_TEXT +
                        availabilityPostfix.ifEmpty { disabledSuffix }
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                } else {
                    nodeIcon = SnykIcons.SNYK_CODE
                    text = value.userObject.toString()
                    attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES
                }
            }
            is RootQualityIssuesTreeNode -> {
                val settings = pluginSettings()
                if (!settings.snykCodeQualityIssuesScanEnable) {
                    nodeIcon = SnykIcons.SNYK_CODE_DISABLED
                    val availabilityPostfix = snykCodeAvailabilityPostfix()
                    text = SnykToolWindowPanel.SNYKCODE_QUALITY_ISSUES_ROOT_TEXT +
                        availabilityPostfix.ifEmpty { disabledSuffix }
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                } else {
                    nodeIcon = SnykIcons.SNYK_CODE
                    text = value.userObject.toString()
                    attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES
                }
            }
            is RootIacIssuesTreeNode -> {
                val settings = pluginSettings()
                if (!settings.iacScanEnabled) {
                    nodeIcon = SnykIcons.IAC_DISABLED
                    text = SnykToolWindowPanel.IAC_ROOT_TEXT + disabledSuffix
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                } else {
                    nodeIcon = SnykIcons.IAC
                    text = value.userObject.toString()
                    attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES
                }
            }
            is RootContainerIssuesTreeNode -> {
                val settings = pluginSettings()
                if (!settings.containerScanEnabled) {
                    nodeIcon = SnykIcons.CONTAINER_DISABLED
                    text = SnykToolWindowPanel.CONTAINER_ROOT_TEXT + disabledSuffix
                    attributes = SimpleTextAttributes.GRAYED_ATTRIBUTES
                } else {
                    nodeIcon = SnykIcons.CONTAINER
                    text = value.userObject.toString()
                    attributes = SimpleTextAttributes.REGULAR_BOLD_ATTRIBUTES
                }
            }
        }
        icon = nodeIcon
        font = UIUtil.getTreeFont()
        text?.let { append(it, attributes) }
    }

    private fun getDisabledIcon(originalIcon: Icon?) =
        originalIcon?.let { IconUtil.colorize(it, Color.LIGHT_GRAY) }

    companion object {
        private const val obsoleteSuffix = " (obsolete)"
        private const val ignoredSuffix = " (ignored)"
        private const val disabledSuffix = " (disabled)"
    }
}
