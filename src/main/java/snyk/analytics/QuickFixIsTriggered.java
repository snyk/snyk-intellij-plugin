//
//  QuickFixIsTriggered.java
//  This file is auto-generated by Amplitude. Run `ampli pull jetbrains` to update.
//
//  Works with versions 1.2+ of ly.iterative.itly:sdk and plugins
//  https://search.maven.org/search?q=itly
//

package snyk.analytics;

import ly.iterative.itly.Event;

import java.util.HashMap;

public class QuickFixIsTriggered extends Event {
  private static final String NAME = "Quick Fix Is Triggered";
  private static final String ID = "a9c49cfb-71d3-4477-8bb5-e2ed0ff47da9";
  private static final String VERSION = "1.0.0";

  public enum Ide {
    VISUAL_STUDIO_CODE("Visual Studio Code"), VISUAL_STUDIO("Visual Studio"), ECLIPSE("Eclipse"), JETBRAINS("JetBrains");

    private final String ide;

    public String getIde() {
      return this.ide;
    }

    Ide(String ide) {
      this.ide = ide;
    }
  }

  public enum Product {
    OPEN_SOURCE("Open Source"), CONTAINER("Container"), INFRASTRUCTURE_AS_CODE("Infrastructure as Code"), CODE("Code");

    private final String product;

    public String getProduct() {
      return this.product;
    }

    Product(String product) {
      this.product = product;
    }
  }

  private QuickFixIsTriggered(Builder builder) {
    super(NAME, builder.properties, ID, VERSION);
  }

  private QuickFixIsTriggered(QuickFixIsTriggered clone) {
    super(NAME, new HashMap<>(clone.getProperties()), ID, VERSION);
  }

  public QuickFixIsTriggered clone() {
    return new QuickFixIsTriggered(this);
  }

  public static IIde builder() {
    return new Builder();
  }

  // Inner Builder class with required properties
  public static class Builder implements IIde, IQuickFixType, IBuild {
    private final HashMap<String, Object> properties = new HashMap<>();

    private Builder() {
      this.properties.put("itly", true);
    }

    /**
     * Ide family.
     * <p>
     * Must be followed by {@link IQuickFixType#quickFixType(String[])
     */
    public IQuickFixType ide(Ide ide) {
      this.properties.put("ide", ide.getIde());
      return this;
    }

    /**
     * Quick fix types displayed to the user:
     * <p>
     * * Show this suggestion
     * <p>
     * * Ignore this particular suggestion
     * <p>
     * * Ignore this suggestion in current file
     * <p>
     * Due to array type definition limitation in Iteratively, the type is enforced in the code as follows:
     * <p>
     * ```
     * type SupportedQuickFixProperties =
     * | 'Show Suggestion'
     * | 'Ignore Suggestion In Line'
     * | 'Ignore Suggestion In File';
     * ```
     * <p>
     * Must be followed by by additional optional properties or build() method
     */
    public Builder quickFixType(String[] quickFixType) {
      this.properties.put("quickFixType", quickFixType);
      return this;
    }

    /**
     * Which Snyk product this relates to
     */
    public Builder product(Product product) {
      this.properties.put("product", product.getProduct());
      return this;
    }

    public QuickFixIsTriggered build() {
      return new QuickFixIsTriggered(this);
    }
  }

  // Required property interfaces
  public interface IIde {
    IQuickFixType ide(Ide ide);
  }

  public interface IQuickFixType {
    Builder quickFixType(String[] quickFixType);
  }

  /**
   * Build interface with optional properties
   */
  public interface IBuild {
    IBuild product(Product product);

    QuickFixIsTriggered build();
  }
}
