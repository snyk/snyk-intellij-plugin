//
//  AnalysisIsReady.java
//  This file is auto-generated by Iteratively. Run `itly pull jetbrains` to update.
//
//  Works with versions 1.2+ of ly.iterative.itly:sdk and plugins
//  https://search.maven.org/search?q=itly
//

package snyk.analytics;

import ly.iterative.itly.Event;

import java.util.HashMap;

public class AnalysisIsReady extends Event {
  private static final String NAME = "Analysis Is Ready";
  private static final String ID = "c9337edb-27a3-416e-a654-092fa4375feb";
  private static final String VERSION = "2.0.0";

  public enum Ide {
    VISUAL_STUDIO_CODE("Visual Studio Code"), VISUAL_STUDIO("Visual Studio"), ECLIPSE("Eclipse"), JETBRAINS("JetBrains");

    private String ide;

    public String getIde() {
      return this.ide;
    }

    Ide(String ide) {
      this.ide = ide;
    }
  }

    public enum AnalysisType {
        SNYK_ADVISOR("Snyk Advisor"), SNYK_CODE_QUALITY("Snyk Code Quality"), SNYK_CODE_SECURITY("Snyk Code Security"), SNYK_OPEN_SOURCE("Snyk Open Source"), SNYK_CONTAINER("Snyk Container"), SNYK_INFRASTRUCTURE_AS_CODE("Snyk Infrastructure as Code");

        private String analysisType;

        public String getAnalysisType()
        {
            return this.analysisType;
        }

        AnalysisType(String analysisType)
        {
            this.analysisType = analysisType;
        }
    }

    public enum Result {
        SUCCESS("Success"), ERROR("Error");

        private String result;

        public String getResult()
        {
            return this.result;
        }

        Result(String result)
        {
            this.result = result;
        }
    }

    private AnalysisIsReady(Builder builder) {
        super(NAME, builder.properties, ID, VERSION);
    }

    private AnalysisIsReady(AnalysisIsReady clone) {
        super(NAME, new HashMap<>(clone.getProperties()), ID, VERSION);
    }

    public AnalysisIsReady clone() {
        return new AnalysisIsReady(this);
    }

    public static IAnalysisType builder() { return new Builder(); }

    // Inner Builder class with required properties
    public static class Builder implements IAnalysisType, IIde, IResult, IBuild {
        private final HashMap<String, Object> properties = new HashMap<String, Object>();

        private Builder() {
            this.properties.put("itly", true);
        }

        /**
         * Analysis types selected by the user for the scan:
         *
         * * open source vulnerabilities
         *
         * * code quality issues
         *
         * * code security vulnerabilities
         *
         * * advisor issues
         *
         * * infrastructure as code issues
         *
         * * container vulnerabilities
         * <p>
         * Must be followed by {@link IIde#ide(Ide)
         */
        public IIde analysisType(AnalysisType analysisType) {
            this.properties.put("analysisType", analysisType.getAnalysisType());
            return this;
        }

        /**
         * Ide family.
         * <p>
         * Must be followed by {@link IResult#result(Result)
         */
        public IResult ide(Ide ide) {
            this.properties.put("ide", ide.getIde());
            return this;
        }

        /**

         * <p>
         * Must be followed by by additional optional properties or build() method
         */
        public Builder result(Result result) {
            this.properties.put("result", result.getResult());
            return this;
        }

        public AnalysisIsReady build() {
            return new AnalysisIsReady(this);
        }
    }

    // Required property interfaces
    public interface IAnalysisType {
        IIde analysisType(AnalysisType analysisType);
    }

    public interface IIde {
        IResult ide(Ide ide);
    }

    public interface IResult {
        Builder result(Result result);
    }

    /** Build interface with optional properties */
    public interface IBuild {
        AnalysisIsReady build();
    }
}
