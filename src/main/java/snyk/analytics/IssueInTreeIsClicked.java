//
//  IssueInTreeIsClicked.java
//  This file is auto-generated by Iteratively. Run `itly pull jetbrains` to update.
//
//  Works with versions 1.2+ of ly.iterative.itly:sdk and plugins
//  https://search.maven.org/search?q=itly
//

package snyk.analytics;

import ly.iterative.itly.Event;

import java.util.HashMap;

public class IssueInTreeIsClicked extends Event {
  private static final String NAME = "Issue In Tree Is Clicked";
  private static final String ID = "fae15d02-eab9-49bb-9833-18414e26058b";
  private static final String VERSION = "1.0.0";

  public enum Ide {
    VISUAL_STUDIO_CODE("Visual Studio Code"), VISUAL_STUDIO("Visual Studio"), ECLIPSE("Eclipse"), JETBRAINS("JetBrains");

    private String ide;

    public String getIde() {
      return this.ide;
    }

    Ide(String ide) {
      this.ide = ide;
    }
  }

  public enum IssueType {
    OPEN_SOURCE_VULNERABILITY("Open Source Vulnerability"), LICENCE_ISSUE("Licence Issue"), CODE_QUALITY_ISSUE("Code Quality Issue"), CODE_SECURITY_VULNERABILITY("Code Security Vulnerability"), ADVISOR("Advisor");

    private String issueType;

    public String getIssueType() {
      return this.issueType;
    }

    IssueType(String issueType) {
      this.issueType = issueType;
    }
  }

  public enum Severity {
    HIGH("High"), MEDIUM("Medium"), LOW("Low"), CRITICAL("Critical");

    private String severity;

    public String getSeverity() {
      return this.severity;
    }

    Severity(String severity) {
      this.severity = severity;
    }
  }

  private IssueInTreeIsClicked(Builder builder) {
    super(NAME, builder.properties, ID, VERSION);
  }

  private IssueInTreeIsClicked(IssueInTreeIsClicked clone) {
    super(NAME, new HashMap<>(clone.getProperties()), ID, VERSION);
  }

  public IssueInTreeIsClicked clone() {
    return new IssueInTreeIsClicked(this);
  }

  public static IIde builder() {
    return new Builder();
  }

  // Inner Builder class with required properties
  public static class Builder implements IIde, IIssueId, IIssueType, ISeverity, IBuild {
    private final HashMap<String, Object> properties = new HashMap<String, Object>();

    private Builder() {
      this.properties.put("itly", true);
    }

    /**
     * Ide family.
     * <p>
     * Must be followed by {@link IIssueId#issueId(String)
     */
    public IIssueId ide(Ide ide) {
      this.properties.put("ide", ide.getIde());
      return this;
    }

    /**
     * Issue ID as received from the backend.
     * <p>
     * Must be followed by {@link IIssueType#issueType(IssueType)
     */
    public IIssueType issueId(String issueId) {
      this.properties.put("issueId", issueId);
      return this;
    }

    /**
     * Issue type
     * <p>
     * Must be followed by {@link ISeverity#severity(Severity)
     */
    public ISeverity issueType(IssueType issueType) {
      this.properties.put("issueType", issueType.getIssueType());
      return this;
    }

    /**
     * Severity of the issue
     * <p>
     * Must be followed by by additional optional properties or build() method
     */
    public Builder severity(Severity severity) {
      this.properties.put("severity", severity.getSeverity());
      return this;
    }

    public IssueInTreeIsClicked build() {
      return new IssueInTreeIsClicked(this);
    }
  }

  // Required property interfaces
  public interface IIde {
    IIssueId ide(Ide ide);
  }

  public interface IIssueId {
    IIssueType issueId(String issueId);
  }

  public interface IIssueType {
    ISeverity issueType(IssueType issueType);
  }

  public interface ISeverity {
    Builder severity(Severity severity);
  }

  /**
   * Build interface with optional properties
   */
  public interface IBuild {
    IssueInTreeIsClicked build();
  }
}
