{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-01-28T15:18:37.743372Z",
      "credit": [
        "aaron_costello"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\n[dot-prop](https://github.com/sindresorhus/dot-prop#readme) is a package to get, set, or delete a property from a nested object using a dot path.\n\nAffected versions of this package are vulnerable to Prototype Pollution. It is possible for a user to modify the prototype of a base object.\r\n\r\n## PoC by aaron_costello \r\n```\r\nvar dotProp = require(\"dot-prop\")\r\nconst object = {};\r\nconsole.log(\"Before \" + object.b); //Undefined\r\ndotProp.set(object, '__proto__.b', true);\r\nconsole.log(\"After \" + {}.b); //true\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `dot-prop` to version 5.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/sindresorhus/dot-prop/commit/3039c8c07f6fdaa8b595ec869ae0895686a7a0f2)\n- [HackerOne Report](https://hackerone.com/reports/719856)\n",
      "disclosureTime": "2020-01-28T10:17:51Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "5.1.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "module.exports.set"
          },
          "version": [
            ">1.0.1 <5.1.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "module.exports.set"
          },
          "version": [
            ">1.0.1 <5.1.1"
          ]
        }
      ],
      "id": "SNYK-JS-DOTPROP-543489",
      "identifiers": {
        "CVE": [
          "CVE-2020-8116"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:37:04.659368Z",
      "moduleName": "dot-prop",
      "packageManager": "npm",
      "packageName": "dot-prop",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2020-01-28T16:23:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/sindresorhus/dot-prop/commit/3039c8c07f6fdaa8b595ec869ae0895686a7a0f2"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/719856"
        }
      ],
      "semver": {
        "vulnerable": [
          ">1.0.1 <5.1.1"
        ]
      },
      "severity": "medium",
      "title": "Prototype Pollution",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "nodemon@1.19.4",
        "update-notifier@2.5.0",
        "configstore@3.1.2",
        "dot-prop@4.2.0"
      ],
      "upgradePath": [
        false,
        "mock2easy@0.0.24",
        "nodemon@1.19.4",
        "update-notifier@2.5.0",
        "configstore@3.1.4"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "dot-prop",
      "version": "4.2.0"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
      "alternativeIds": [],
      "creationTime": "2020-06-15T09:37:01.325929Z",
      "credit": [
        "Snyk Security Team"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n\nAffected versions of this package are vulnerable to Command Injection a malicious user could inject commands through the `_data` variable:\r\n\r\n### Affected Area\r\n```\r\n    require('../server/getJsonByCurl')(mock2easy, function (error, stdout) {\r\n      if (error) {\r\n        return  res.json(500, error);\r\n      }\r\n      res.json(JSON.parse(stdout));\r\n    }, '', _data.interfaceUrl, query, _data.cookie,_data.interfaceType);\r\n```\n## Remediation\nThere is no fixed version for `mock2easy`.\n## References\n- [mock2easy Homepage](https://www.npmjs.com/package/mock2easy)\n",
      "disclosureTime": "2020-06-15T07:44:56Z",
      "exploit": "Unproven",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-MOCK2EASY-572312",
      "identifiers": {
        "CVE": [
          "CVE-2020-7697"
        ],
        "CWE": [
          "CWE-79"
        ]
      },
      "language": "js",
      "modificationTime": "2020-07-23T12:25:45.676022Z",
      "moduleName": "mock2easy",
      "packageManager": "npm",
      "packageName": "mock2easy",
      "patches": [],
      "proprietary": true,
      "publicationTime": "2020-07-23T12:25:45Z",
      "references": [
        {
          "title": "mock2easy Homepage",
          "url": "https://www.npmjs.com/package/mock2easy"
        }
      ],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severity": "high",
      "title": "Command Injection",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "mock2easy",
      "version": "0.0.24"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
      "alternativeIds": [
        "SNYK-JS-MOCK2EASY-10496"
      ],
      "creationTime": "2017-04-30T10:25:31.315000Z",
      "credit": [
        "Cristian-Alexandru Staicu",
        "Michael Pradel",
        "Ben Livshits"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[`mock2easy`](https://www.npmjs.com/package/mock2easy) dynamically generates static interfaces, making them live with MockJSmongui.\n\nAffected versions of the package are vulnerable to Arbitrary Code Injection due to unsafe use of the `eval()` function. Node.js provides the `eval()` function by default, and is used to translate strings into Javascript code. An attacker can craft a malicious payload to inject arbitrary commands.\n\n## Remediation\nThere is no fix version for `mock2easy`.\n\n## References\n- [GitHub Issue](https://github.com/appLhui/mock2easy/issues/2)\n- [Research Paper - Understanding and Automatically Preventing Injection Attacks on Node.js](http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_07A-2_Staicu_paper.pdf)\n",
      "disclosureTime": "2016-04-08T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "npm:mock2easy:20160408",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MOCK2EASY-10496"
        ],
        "CVE": [],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "js",
      "modificationTime": "2018-11-18T11:50:41.027923Z",
      "moduleName": "mock2easy",
      "packageManager": "npm",
      "packageName": "mock2easy",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-05-01T07:50:31.315000Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/appLhui/mock2easy/issues/2"
        },
        {
          "title": "Research Paper - Understanding and Automatically Preventing Injection Attacks on Node.js",
          "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_07A-2_Staicu_paper.pdf"
        }
      ],
      "semver": {
        "vulnerable": [
          "*"
        ]
      },
      "severity": "medium",
      "title": "Arbitrary Code Injection",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "mock2easy",
      "version": "0.0.24"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:A/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:H/E:P",
      "alternativeIds": [],
      "creationTime": "2018-11-11T12:38:44.575882Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.8,
      "description": "## Overview\n[morgan](https://www.npmjs.com/package/morgan) is a HTTP request logger middleware for node.js.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection. An attacker could use the format parameter to inject arbitrary commands.\n## Remediation\nUpgrade `morgan` to version 1.9.1 or higher.\n## References\n- [GitHub Commit](https://github.com/expressjs/morgan/commit/e329663836809de4be557b200a5b983ab8b4e6c2)\n- [HackerOne Report](https://hackerone.com/reports/390881)\n",
      "disclosureTime": "2018-11-09T12:12:59Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "1.9.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "compile"
          },
          "version": [
            "<1.9.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "compile"
          },
          "version": [
            "<1.9.1"
          ]
        }
      ],
      "id": "SNYK-JS-MORGAN-72579",
      "identifiers": {
        "CVE": [
          "CVE-2019-5413"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:37:02.657540Z",
      "moduleName": "morgan",
      "packageManager": "npm",
      "packageName": "morgan",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-11-12T17:29:35Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/expressjs/morgan/commit/e329663836809de4be557b200a5b983ab8b4e6c2"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/390881"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.9.1"
        ]
      },
      "severity": "medium",
      "title": "Arbitrary Code Injection",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "morgan@1.0.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "morgan",
      "version": "1.0.1"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/RL:O",
      "alternativeIds": [],
      "creationTime": "2019-03-31T10:27:47.709659Z",
      "credit": [
        "ChaLKer"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[open](https://www.npmjs.com/package/open) is a cross platform package that opens stuff like URLs, files, executables.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection when unsanitized user input is passed in.\r\n\r\nThe package does come with the following warning in the readme:\r\n\r\n```\r\nThe same care should be taken when calling open as if you were calling child_process.exec directly. If it is an executable it will run in a new shell.\r\n```\r\nThe package `open` is replacing the `opn` package, which is now deprecated. The older versions of `open` are vulnerable. \r\n\r\n**Note: Upgrading `open` to the last version will prevent this vulnerability but is also likely to have unwanted effects since it now has a very different API.**\n## Remediation\nUpgrade `open` to version 6.0.0 or higher.\n## References\n- [GitHub Issue](https://github.com/pwnall/node-open/issues/68)\n- [HackerOne Report](https://hackerone.com/reports/319473)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/663)\n",
      "disclosureTime": "2018-05-16T19:36:39Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JS-OPEN-174041",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-94"
        ],
        "GHSA": [
          "GHSA-28xh-wpgr-7fm8"
        ],
        "NSP": [
          663
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:55.653898Z",
      "moduleName": "open",
      "packageManager": "npm",
      "packageName": "open",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2019-03-31T10:33:37Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/pwnall/node-open/issues/68"
        },
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/319473"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/663"
        }
      ],
      "semver": {
        "vulnerable": [
          "<6.0.0"
        ]
      },
      "severity": "high",
      "title": "Arbitrary Code Injection",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "open@0.0.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "open",
      "version": "0.0.5"
    },
    {
      "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
      "alternativeIds": [
        "SNYK-JS-OPEN-12148"
      ],
      "creationTime": "2018-02-25T11:54:41.573000Z",
      "credit": [
        "ChALkeR"
      ],
      "cvssScore": 8.4,
      "description": "## Overview\n[open](https://www.npmjs.com/package/open) is a cross platform package that opens stuff like URLs, files, executables.\n\nAffected versions of this package are vulnerable to Arbitrary Command Injection. Urls are not properly escaped before concatenating them into the command that is opened using `exec()`.\r\n\r\n**Note: Upgrading `open` to the last version will prevent this vulnerability but is also likely to have unwanted effects since it now has a very different API.**\n## Remediation\nUpgrade `open` to version 6.0.0 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/319473)\n",
      "disclosureTime": "2018-05-12T11:54:41Z",
      "exploit": "Proof of Concept",
      "fixedIn": [
        "6.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:open:20180512",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-OPEN-12148"
        ],
        "CVE": [],
        "CWE": [
          "CWE-264"
        ],
        "NSP": [
          663
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T08:52:32.287783Z",
      "moduleName": "open",
      "packageManager": "npm",
      "packageName": "open",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-05-13T14:26:27Z",
      "references": [
        {
          "title": "HackerOne Report",
          "url": "https://hackerone.com/reports/319473"
        }
      ],
      "semver": {
        "vulnerable": [
          "<6.0.0"
        ]
      },
      "severity": "high",
      "title": "Arbitrary Command Injection",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "open@0.0.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "open",
      "version": "0.0.5"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N",
      "alternativeIds": [
        "SNYK-JS-CONSTANTINOPLE-12136"
      ],
      "creationTime": "2018-03-02T16:46:56.854000Z",
      "credit": [
        "Mike Samuel"
      ],
      "cvssScore": 10,
      "description": "## Overview\r\n[`constantinople`](https://www.npmjs.com/package/constantinople) determines whether a JavaScript expression evaluates to a constant (using acorn).\r\n\r\nAffected versions of this package are vulnerable to a sandbox bypass which can lead to arbitrary code execution.\r\n\r\n## Remediation\r\nUpgrade `constantinople` to version 3.1.1 or higher.\r\n\r\n## References\r\n- [NSP Advisory](https://nodesecurity.io/advisories/568)",
      "disclosureTime": "2018-04-21T04:33:52Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.1.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:constantinople:20180421",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-CONSTANTINOPLE-12136"
        ],
        "CVE": [],
        "CWE": [
          "CWE-264"
        ],
        "GHSA": [
          "GHSA-4vmm-mhcq-4x9j"
        ],
        "NSP": [
          568
        ]
      },
      "language": "js",
      "modificationTime": "2019-06-02T07:14:02.722430Z",
      "moduleName": "constantinople",
      "packageManager": "npm",
      "packageName": "constantinople",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2018-05-09T16:11:26Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/pugjs/constantinople/commit/01d409c0d081dfd65223e6b7767c244156d35f7f"
        },
        {
          "title": "NSP Advisory",
          "url": "https://nodesecurity.io/advisories/568"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.1.1"
        ]
      },
      "severity": "high",
      "title": "Sandbox Bypass",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "jade@1.3.1",
        "constantinople@2.0.1"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "constantinople",
      "version": "2.0.1"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N",
      "alternativeIds": [
        "SNYK-JS-COOKIESIGNATURE-10134"
      ],
      "creationTime": "2016-08-04T03:44:13.904000Z",
      "credit": [
        "tenbits"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\r\n['cookie-signature'](https://www.npmjs.com/package/cookie-signature) is a library for signing cookies.\r\n\r\nVersions before `1.0.4` of the library use the built-in string comparison mechanism, `===`, and not a time constant string comparison. As a result, the comparison will fail faster when the first characters in the token are incorrect.\r\nAn attacker can use this difference to perform a timing attack, essentially allowing them to guess the secret one character at a time.\r\n\r\nYou can read more about timing attacks in Node.js on the Snyk blog: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/\r\n\r\n## Remediation\r\nUpgrade to `1.0.4` or greater.\r\n\r\n## References\r\n- [GitHub History](https://github.com/tj/node-cookie-signature/blob/master/History.md#104--2014-06-25)\r\n- [GitHub Commit](https://github.com/tj/node-cookie-signature/commit/39791081692e9e14aa62855369e1c7f80fbfd50e)",
      "disclosureTime": "2014-01-28T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.0.4"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:cookie-signature:20160804",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-COOKIESIGNATURE-10134"
        ],
        "CVE": [
          "CVE-2016-1000236"
        ],
        "CWE": [
          "CWE-208"
        ],
        "NSP": [
          134
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:46.070625Z",
      "moduleName": "cookie-signature",
      "packageManager": "npm",
      "packageName": "cookie-signature",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-08-29T00:00:00Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/tj/node-cookie-signature/commit/39791081692e9e14aa62855369e1c7f80fbfd50e"
        },
        {
          "title": "GitHub History",
          "url": "https://github.com/tj/node-cookie-signature/blob/master/History.md%23104--2014-06-25"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.4"
        ]
      },
      "severity": "medium",
      "title": "Non-Constant Time String Comparison",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "cookie-parser@1.0.1",
        "cookie-signature@1.0.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "cookie-signature",
      "version": "1.0.3"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N",
      "alternativeIds": [
        "SNYK-JS-COOKIESIGNATURE-10134"
      ],
      "creationTime": "2016-08-04T03:44:13.904000Z",
      "credit": [
        "tenbits"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\r\n['cookie-signature'](https://www.npmjs.com/package/cookie-signature) is a library for signing cookies.\r\n\r\nVersions before `1.0.4` of the library use the built-in string comparison mechanism, `===`, and not a time constant string comparison. As a result, the comparison will fail faster when the first characters in the token are incorrect.\r\nAn attacker can use this difference to perform a timing attack, essentially allowing them to guess the secret one character at a time.\r\n\r\nYou can read more about timing attacks in Node.js on the Snyk blog: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/\r\n\r\n## Remediation\r\nUpgrade to `1.0.4` or greater.\r\n\r\n## References\r\n- [GitHub History](https://github.com/tj/node-cookie-signature/blob/master/History.md#104--2014-06-25)\r\n- [GitHub Commit](https://github.com/tj/node-cookie-signature/commit/39791081692e9e14aa62855369e1c7f80fbfd50e)",
      "disclosureTime": "2014-01-28T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.0.4"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:cookie-signature:20160804",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-COOKIESIGNATURE-10134"
        ],
        "CVE": [
          "CVE-2016-1000236"
        ],
        "CWE": [
          "CWE-208"
        ],
        "NSP": [
          134
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:38:46.070625Z",
      "moduleName": "cookie-signature",
      "packageManager": "npm",
      "packageName": "cookie-signature",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2016-08-29T00:00:00Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/tj/node-cookie-signature/commit/39791081692e9e14aa62855369e1c7f80fbfd50e"
        },
        {
          "title": "GitHub History",
          "url": "https://github.com/tj/node-cookie-signature/blob/master/History.md%23104--2014-06-25"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.4"
        ]
      },
      "severity": "medium",
      "title": "Non-Constant Time String Comparison",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "cookie-signature@1.0.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "cookie-signature",
      "version": "1.0.3"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
      "alternativeIds": [
        "SNYK-JS-EXPRESS-10021"
      ],
      "creationTime": "2014-09-12T04:46:45Z",
      "credit": [
        "Paweł Hałdrzyński"
      ],
      "cvssScore": 5.4,
      "description": "## Overview\r\n[`express`](https://www.npmjs.com/package/express) is a minimalist web framework.\r\n\r\nAffected versions of this package do not enforce the user's browser to set a specific charset in the content-type header while displaying 400 level response messages. This could be used by remote attackers to perform a cross-site scripting attack, by using non-standard encodings like UTF-7.\r\n\r\n## Details\r\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\r\n\r\n\r\n## Recommendations\r\nUpdate express to `3.11.0`, `4.5.0` or higher.\r\n\r\n## References\r\n- [GitHub release 3.11.0](https://github.com/expressjs/express/releases/tag/3.11.0)\r\n- [GitHub release 4.5.0](https://github.com/expressjs/express/releases/tag/4.5.0)",
      "disclosureTime": "2014-09-12T04:46:45Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "3.11.0",
        "4.5.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:express:20140912",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-EXPRESS-10021"
        ],
        "CVE": [
          "CVE-2014-6393"
        ],
        "CWE": [
          "CWE-79"
        ],
        "NSP": [
          8
        ]
      },
      "language": "js",
      "modificationTime": "2019-11-20T10:01:33.495787Z",
      "moduleName": "express",
      "packageManager": "npm",
      "packageName": "express",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2014-09-12T04:46:45Z",
      "references": [
        {
          "title": "GitHub Release",
          "url": "https://github.com/expressjs/express/releases/tag/3.11.0"
        },
        {
          "title": "GitHub Release",
          "url": "https://github.com/expressjs/express/releases/tag/4.5.0"
        }
      ],
      "semver": {
        "vulnerable": [
          "<3.11.0",
          ">=4.0.0 <4.5.0"
        ]
      },
      "severity": "medium",
      "title": "Cross-site Scripting (XSS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "express",
      "version": "4.2.0"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-FRESH-10791"
      ],
      "creationTime": "2017-09-27T08:48:49.286000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\n",
      "disclosureTime": "2017-09-08T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.5.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "id": "npm:fresh:20170908",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-FRESH-10791"
        ],
        "CVE": [
          "CVE-2017-16119"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          526
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:00.441028Z",
      "moduleName": "fresh",
      "packageManager": "npm",
      "packageName": "fresh",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-27T08:48:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jshttp/fresh/issues/24"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.5.2"
        ]
      },
      "severity": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "fresh@0.2.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "fresh",
      "version": "0.2.2"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-FRESH-10791"
      ],
      "creationTime": "2017-09-27T08:48:49.286000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\n",
      "disclosureTime": "2017-09-08T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.5.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "id": "npm:fresh:20170908",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-FRESH-10791"
        ],
        "CVE": [
          "CVE-2017-16119"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          526
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:00.441028Z",
      "moduleName": "fresh",
      "packageManager": "npm",
      "packageName": "fresh",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-27T08:48:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jshttp/fresh/issues/24"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.5.2"
        ]
      },
      "severity": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "send@0.3.0",
        "fresh@0.2.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "fresh",
      "version": "0.2.2"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-FRESH-10791"
      ],
      "creationTime": "2017-09-27T08:48:49.286000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\n",
      "disclosureTime": "2017-09-08T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.5.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "fresh"
          },
          "version": [
            "<0.5.2"
          ]
        }
      ],
      "id": "npm:fresh:20170908",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-FRESH-10791"
        ],
        "CVE": [
          "CVE-2017-16119"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          526
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:00.441028Z",
      "moduleName": "fresh",
      "packageManager": "npm",
      "packageName": "fresh",
      "patches": [],
      "proprietary": false,
      "publicationTime": "2017-09-27T08:48:49Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/jshttp/fresh/issues/24"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.5.2"
        ]
      },
      "severity": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "serve-static@1.1.0",
        "send@0.3.0",
        "fresh@0.2.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "fresh",
      "version": "0.2.2"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MIME-10788"
      ],
      "creationTime": "2017-09-26T05:48:40.307000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
      "disclosureTime": "2017-09-07T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.4.1",
        "2.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "id": "npm:mime:20170907",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MIME-10788"
        ],
        "CVE": [
          "CVE-2017-16138"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          535
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.861216Z",
      "moduleName": "mime",
      "packageManager": "npm",
      "packageName": "mime",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:mime:20170907:0",
          "modificationTime": "2019-12-03T11:40:45.877450Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
          ],
          "version": "=1.2.11 || =1.3.4"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-27T05:48:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/broofa/node-mime/issues/167"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/535"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.4.1",
          ">=2.0.0 <2.0.3"
        ]
      },
      "severity": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "body-parser@1.0.2",
        "type-is@1.1.0",
        "mime@1.2.11"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "mime",
      "version": "1.2.11"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MIME-10788"
      ],
      "creationTime": "2017-09-26T05:48:40.307000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
      "disclosureTime": "2017-09-07T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.4.1",
        "2.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "id": "npm:mime:20170907",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MIME-10788"
        ],
        "CVE": [
          "CVE-2017-16138"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          535
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.861216Z",
      "moduleName": "mime",
      "packageManager": "npm",
      "packageName": "mime",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:mime:20170907:0",
          "modificationTime": "2019-12-03T11:40:45.877450Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
          ],
          "version": "=1.2.11 || =1.3.4"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-27T05:48:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/broofa/node-mime/issues/167"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/535"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.4.1",
          ">=2.0.0 <2.0.3"
        ]
      },
      "severity": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "type-is@1.1.0",
        "mime@1.2.11"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "mime",
      "version": "1.2.11"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MIME-10788"
      ],
      "creationTime": "2017-09-26T05:48:40.307000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
      "disclosureTime": "2017-09-07T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.4.1",
        "2.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "id": "npm:mime:20170907",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MIME-10788"
        ],
        "CVE": [
          "CVE-2017-16138"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          535
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.861216Z",
      "moduleName": "mime",
      "packageManager": "npm",
      "packageName": "mime",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:mime:20170907:0",
          "modificationTime": "2019-12-03T11:40:45.877450Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
          ],
          "version": "=1.2.11 || =1.3.4"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-27T05:48:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/broofa/node-mime/issues/167"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/535"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.4.1",
          ">=2.0.0 <2.0.3"
        ]
      },
      "severity": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "accepts@1.0.1",
        "mime@1.2.11"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "mime",
      "version": "1.2.11"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MIME-10788"
      ],
      "creationTime": "2017-09-26T05:48:40.307000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
      "disclosureTime": "2017-09-07T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.4.1",
        "2.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "id": "npm:mime:20170907",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MIME-10788"
        ],
        "CVE": [
          "CVE-2017-16138"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          535
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.861216Z",
      "moduleName": "mime",
      "packageManager": "npm",
      "packageName": "mime",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:mime:20170907:0",
          "modificationTime": "2019-12-03T11:40:45.877450Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
          ],
          "version": "=1.2.11 || =1.3.4"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-27T05:48:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/broofa/node-mime/issues/167"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/535"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.4.1",
          ">=2.0.0 <2.0.3"
        ]
      },
      "severity": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "send@0.3.0",
        "mime@1.2.11"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "mime",
      "version": "1.2.11"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MIME-10788"
      ],
      "creationTime": "2017-09-26T05:48:40.307000Z",
      "credit": [
        "Cristian-Alexandru Staicu"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS). It uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n## References\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n",
      "disclosureTime": "2017-09-07T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.4.1",
        "2.0.3"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "mime.module.exports.lookup"
          },
          "version": [
            "<1.2.6"
          ]
        },
        {
          "functionId": {
            "filePath": "mime.js",
            "functionName": "Mime.prototype.lookup"
          },
          "version": [
            ">=1.2.6 <1.4.1"
          ]
        },
        {
          "functionId": {
            "filePath": "Mime.js",
            "functionName": "Mime.prototype.getType"
          },
          "version": [
            ">=2.0.0 <2.0.3"
          ]
        }
      ],
      "id": "npm:mime:20170907",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MIME-10788"
        ],
        "CVE": [
          "CVE-2017-16138"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          535
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.861216Z",
      "moduleName": "mime",
      "packageManager": "npm",
      "packageName": "mime",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:mime:20170907:0",
          "modificationTime": "2019-12-03T11:40:45.877450Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"
          ],
          "version": "=1.2.11 || =1.3.4"
        }
      ],
      "proprietary": false,
      "publicationTime": "2017-09-27T05:48:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/broofa/node-mime/issues/167"
        },
        {
          "title": "NPM Security Advisory",
          "url": "https://www.npmjs.com/advisories/535"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.4.1",
          ">=2.0.0 <2.0.3"
        ]
      },
      "severity": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "serve-static@1.1.0",
        "send@0.3.0",
        "mime@1.2.11"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "mime",
      "version": "1.2.11"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "browserify-middleware@7.1.0",
        "ms@0.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.3"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-MS-10509"
      ],
      "creationTime": "2017-04-12T10:02:45.497000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 3.7,
      "description": "## Overview\r\n[`ms`](https://www.npmjs.com/package/ms) is a tiny millisecond conversion utility.\r\n\r\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS) due to an incomplete fix for previously reported vulnerability [npm:ms:20151024](https://snyk.io/vuln/npm:ms:20151024). The fix limited the length of accepted input string to 10,000 characters, and turned to be insufficient making it possible to block the event loop for 0.3 seconds (on a typical laptop) with a specially crafted string passed to `ms()` function.\r\n\r\n*Proof of concept*\r\n```js\r\nms = require('ms');\r\nms('1'.repeat(9998) + 'Q') // Takes about ~0.3s\r\n```\r\n\r\n**Note:** Snyk's patch for this vulnerability limits input length to 100 characters. This new limit was deemed to be a breaking change by the author.\r\nBased on user feedback, we believe the risk of breakage is _very_ low, while the value to your security is much greater, and therefore opted to still capture this change in a patch for earlier versions as well.  Whenever patching security issues, we always suggest to run tests on your code to validate that nothing has been broken.\r\n\r\nFor more information on `Regular Expression Denial of Service (ReDoS)` attacks, go to our [blog](https://snyk.io/blog/redos-and-catastrophic-backtracking/).\r\n\r\n## Disclosure Timeline\r\n- Feb 9th, 2017 - Reported the issue to package owner.\r\n- Feb 11th, 2017 - Issue acknowledged by package owner.\r\n- April 12th, 2017 - Fix PR opened by Snyk Security Team.\r\n- May 15th, 2017 - Vulnerability published.\r\n- May 16th, 2017 - Issue fixed and version `2.0.0` released.\r\n- May 21th, 2017 - Patches released for versions `>=0.7.1, <=1.0.0`.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `ms` to version 2.0.0 or higher.\r\n\r\n## References\r\n- [GitHub PR](https://github.com/zeit/ms/pull/89)\r\n- [GitHub Commit](https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef)",
      "disclosureTime": "2017-04-11T21:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "parse"
          },
          "version": [
            ">=0.7.3 <2.0.0"
          ]
        }
      ],
      "id": "npm:ms:20170412",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-MS-10509"
        ],
        "CVE": [],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-09T09:57:45.833759Z",
      "moduleName": "ms",
      "packageManager": "npm",
      "packageName": "ms",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:0",
          "modificationTime": "2019-12-03T11:40:45.863964Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_100.patch"
          ],
          "version": "=1.0.0"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:1",
          "modificationTime": "2019-12-03T11:40:45.865081Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_072-073.patch"
          ],
          "version": "=0.7.2 || =0.7.3"
        },
        {
          "comments": [],
          "id": "patch:npm:ms:20170412:2",
          "modificationTime": "2019-12-03T11:40:45.866206Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/ms/20170412/ms_071.patch"
          ],
          "version": "=0.7.1"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-05-15T06:02:45Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/zeit/ms/pull/89/commits/305f2ddcd4eff7cc7c518aca6bb2b2d2daad8fef"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/zeit/ms/pull/89"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=0.7.1 <2.0.0"
        ]
      },
      "severity": "low",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "browserify-middleware@7.1.0",
        "prepare-response@1.1.3",
        "ms@0.7.3"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "ms",
      "version": "0.7.3"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-NEGOTIATOR-10104"
      ],
      "creationTime": "2016-06-16T18:00:02.240000Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[negotiator](https://npmjs.org/package/negotiator) is an HTTP content negotiator for Node.js.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS)\nwhen parsing `Accept-Language` http header.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `negotiator` to version 0.6.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c)\n\n- [OSWAP Advisory](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\n",
      "disclosureTime": "2016-06-16T17:36:06Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.6.1"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/language.js",
            "functionName": "parseLanguage"
          },
          "version": [
            "<0.6.1"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/language.js",
            "functionName": "parseLanguage"
          },
          "version": [
            "<0.6.1"
          ]
        }
      ],
      "id": "npm:negotiator:20160616",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-NEGOTIATOR-10104"
        ],
        "CVE": [
          "CVE-2016-10539"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          106
        ]
      },
      "language": "js",
      "modificationTime": "2019-12-02T14:39:17.044101Z",
      "moduleName": "negotiator",
      "packageManager": "npm",
      "packageName": "negotiator",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:0",
          "modificationTime": "2019-12-03T11:40:45.829417Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_0_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "0.6.0"
        },
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:1",
          "modificationTime": "2019-12-03T11:40:45.830538Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_1_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "<= 0.5.3 > 0.4.7"
        },
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:2",
          "modificationTime": "2019-12-03T11:40:45.831546Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_2_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "<= 0.4.7 > 0.1.0"
        },
        {
          "comments": [],
          "id": "patch:npm:negotiator:20160616:3",
          "modificationTime": "2019-12-03T11:40:45.832684Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_3_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"
          ],
          "version": "0.1.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2016-06-16T17:36:06Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c"
        },
        {
          "title": "OSWAP Advisory",
          "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.6.1"
        ]
      },
      "severity": "high",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "accepts@1.0.1",
        "negotiator@0.4.9"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "negotiator",
      "version": "0.4.9"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-QS-10019"
      ],
      "creationTime": "2014-08-06T06:10:22Z",
      "credit": [
        "Dustin Shiver"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nDuring parsing, the `qs` module may create a sparse area (an array where no elements are filled), and grow that array to the necessary size based on the indices used on it. An attacker can specify a high index value in a query string, thus making the server allocate a respectively big array. Truly large values can cause the server to run out of memory and cause it to crash - thus enabling a Denial-of-Service attack.\n\n## Remediation\n\nUpgrade `qs` to version 1.0.0 or higher.\n\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n\n- [GitHub Commit](https://github.com/tj/node-querystring/pull/114/commits/43a604b7847e56bba49d0ce3e222fe89569354d8)\n\n- [GitHub Issue](https://github.com/visionmedia/node-querystring/issues/104)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2014-7191)\n",
      "disclosureTime": "2014-08-06T06:10:22Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "compact"
          },
          "version": [
            "<1.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "compact"
          },
          "version": [
            "<1.0.0"
          ]
        }
      ],
      "id": "npm:qs:20140806",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-QS-10019"
        ],
        "CVE": [
          "CVE-2014-7191"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gqgv-6jq5-jjj9"
        ],
        "NSP": [
          29
        ]
      },
      "language": "js",
      "modificationTime": "2019-02-18T08:28:59.375824Z",
      "moduleName": "qs",
      "packageManager": "npm",
      "packageName": "qs",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:qs:20140806:1",
          "modificationTime": "2019-12-03T11:40:45.728930Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20140806/qs_20140806_0_1_snyk_npm.patch"
          ],
          "version": "=0.5.6"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20140806:0",
          "modificationTime": "2019-12-03T11:40:45.741062Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20140806/qs_20140806_0_0_43a604b7847e56bba49d0ce3e222fe89569354d8_snyk.patch"
          ],
          "version": "<1.0.0 >=0.6.5"
        }
      ],
      "proprietary": false,
      "publicationTime": "2014-08-06T06:10:22Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/tj/node-querystring/pull/114/commits/43a604b7847e56bba49d0ce3e222fe89569354d8"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/node-querystring/issues/104"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2014-7191"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.0"
        ]
      },
      "severity": "high",
      "title": "Denial of Service (DoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "body-parser@1.0.2",
        "qs@0.6.6"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "qs",
      "version": "0.6.6"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-QS-10020"
      ],
      "creationTime": "2014-08-06T06:10:23Z",
      "credit": [
        "Tom Steele"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). When parsing a string representing a deeply nested object, qs will block the event loop for long periods of time. Such a delay may hold up the server's resources, keeping it from processing other requests in the meantime, thus enabling a Denial-of-Service attack.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `qs` to version 1.0.0 or higher.\n## References\n- [Node Security Advisory](https://nodesecurity.io/advisories/28)\n",
      "disclosureTime": "2014-08-06T06:10:23Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:qs:20140806-1",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-QS-10020"
        ],
        "CVE": [
          "CVE-2014-10064"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          28
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:44.334026Z",
      "moduleName": "qs",
      "packageManager": "npm",
      "packageName": "qs",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:qs:20140806-1:0",
          "modificationTime": "2019-12-03T11:40:45.742148Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20140806-1/qs_20140806-1_0_0_snyk.patch"
          ],
          "version": "<1.0.0 >=0.6.5"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20140806-1:1",
          "modificationTime": "2019-12-03T11:40:45.744535Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20140806-1/qs_20140806-1_0_1_snyk.patch"
          ],
          "version": "=0.5.6"
        }
      ],
      "proprietary": false,
      "publicationTime": "2014-08-06T06:10:23Z",
      "references": [
        {
          "title": "Node Security Advisory",
          "url": "https://nodesecurity.io/advisories/28"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.0"
        ]
      },
      "severity": "medium",
      "title": "Denial of Service (DoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "body-parser@1.0.2",
        "qs@0.6.6"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "qs",
      "version": "0.6.6"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-QS-10407"
      ],
      "creationTime": "2017-02-14T11:44:54.163000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
      "disclosureTime": "2017-02-13T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.0.4",
        "6.1.2",
        "6.2.3",
        "6.3.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "internals.parseObject"
          },
          "version": [
            "<6.0.4"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parseObject"
          },
          "version": [
            ">=6.2.0 <6.2.3",
            "6.3.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parseObjectRecursive"
          },
          "version": [
            ">=6.3.1 <6.3.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "internals.parseObject"
          },
          "version": [
            "<6.0.4"
          ]
        },
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parseObject"
          },
          "version": [
            ">=6.2.0 <6.2.3",
            "6.3.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parseObjectRecursive"
          },
          "version": [
            ">=6.3.1 <6.3.2"
          ]
        }
      ],
      "id": "npm:qs:20170213",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-QS-10407"
        ],
        "CVE": [
          "CVE-2017-1000048"
        ],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.880024Z",
      "moduleName": "qs",
      "packageManager": "npm",
      "packageName": "qs",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:0",
          "modificationTime": "2019-12-03T11:40:45.855245Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch"
          ],
          "version": "=6.3.0"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:1",
          "modificationTime": "2019-12-03T11:40:45.856271Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch"
          ],
          "version": "=6.3.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:2",
          "modificationTime": "2019-12-03T11:40:45.857318Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch"
          ],
          "version": "=6.2.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:3",
          "modificationTime": "2019-12-03T11:40:45.858334Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch"
          ],
          "version": "=6.2.2"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:4",
          "modificationTime": "2019-12-03T11:40:45.859411Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch"
          ],
          "version": "=6.1.0"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:5",
          "modificationTime": "2019-12-03T11:40:45.860523Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch"
          ],
          "version": "=6.1.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:6",
          "modificationTime": "2019-12-03T11:40:45.861504Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch"
          ],
          "version": "=6.0.2"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:7",
          "modificationTime": "2019-12-03T11:40:45.862615Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch"
          ],
          "version": "=6.0.3"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-03-01T10:00:54Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/ljharb/qs/issues/200"
        }
      ],
      "semver": {
        "vulnerable": [
          "<6.0.4",
          ">=6.1.0 <6.1.2",
          ">=6.2.0 <6.2.3",
          ">=6.3.0 <6.3.2"
        ]
      },
      "severity": "high",
      "title": "Prototype Override Protection Bypass",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "body-parser@1.0.2",
        "qs@0.6.6"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "qs",
      "version": "0.6.6"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-QS-10019"
      ],
      "creationTime": "2014-08-06T06:10:22Z",
      "credit": [
        "Dustin Shiver"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nDuring parsing, the `qs` module may create a sparse area (an array where no elements are filled), and grow that array to the necessary size based on the indices used on it. An attacker can specify a high index value in a query string, thus making the server allocate a respectively big array. Truly large values can cause the server to run out of memory and cause it to crash - thus enabling a Denial-of-Service attack.\n\n## Remediation\n\nUpgrade `qs` to version 1.0.0 or higher.\n\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n\n- [GitHub Commit](https://github.com/tj/node-querystring/pull/114/commits/43a604b7847e56bba49d0ce3e222fe89569354d8)\n\n- [GitHub Issue](https://github.com/visionmedia/node-querystring/issues/104)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2014-7191)\n",
      "disclosureTime": "2014-08-06T06:10:22Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.0.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "index.js",
            "functionName": "compact"
          },
          "version": [
            "<1.0.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "index.js",
            "functionName": "compact"
          },
          "version": [
            "<1.0.0"
          ]
        }
      ],
      "id": "npm:qs:20140806",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-QS-10019"
        ],
        "CVE": [
          "CVE-2014-7191"
        ],
        "CWE": [
          "CWE-400"
        ],
        "GHSA": [
          "GHSA-gqgv-6jq5-jjj9"
        ],
        "NSP": [
          29
        ]
      },
      "language": "js",
      "modificationTime": "2019-02-18T08:28:59.375824Z",
      "moduleName": "qs",
      "packageManager": "npm",
      "packageName": "qs",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:qs:20140806:1",
          "modificationTime": "2019-12-03T11:40:45.728930Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20140806/qs_20140806_0_1_snyk_npm.patch"
          ],
          "version": "=0.5.6"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20140806:0",
          "modificationTime": "2019-12-03T11:40:45.741062Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20140806/qs_20140806_0_0_43a604b7847e56bba49d0ce3e222fe89569354d8_snyk.patch"
          ],
          "version": "<1.0.0 >=0.6.5"
        }
      ],
      "proprietary": false,
      "publicationTime": "2014-08-06T06:10:22Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/tj/node-querystring/pull/114/commits/43a604b7847e56bba49d0ce3e222fe89569354d8"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/visionmedia/node-querystring/issues/104"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2014-7191"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.0"
        ]
      },
      "severity": "high",
      "title": "Denial of Service (DoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "qs@0.6.6"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "qs",
      "version": "0.6.6"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-QS-10020"
      ],
      "creationTime": "2014-08-06T06:10:23Z",
      "credit": [
        "Tom Steele"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Denial of Service (DoS). When parsing a string representing a deeply nested object, qs will block the event loop for long periods of time. Such a delay may hold up the server's resources, keeping it from processing other requests in the meantime, thus enabling a Denial-of-Service attack.\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `qs` to version 1.0.0 or higher.\n## References\n- [Node Security Advisory](https://nodesecurity.io/advisories/28)\n",
      "disclosureTime": "2014-08-06T06:10:23Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.0.0"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:qs:20140806-1",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-QS-10020"
        ],
        "CVE": [
          "CVE-2014-10064"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          28
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:44.334026Z",
      "moduleName": "qs",
      "packageManager": "npm",
      "packageName": "qs",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:qs:20140806-1:0",
          "modificationTime": "2019-12-03T11:40:45.742148Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20140806-1/qs_20140806-1_0_0_snyk.patch"
          ],
          "version": "<1.0.0 >=0.6.5"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20140806-1:1",
          "modificationTime": "2019-12-03T11:40:45.744535Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20140806-1/qs_20140806-1_0_1_snyk.patch"
          ],
          "version": "=0.5.6"
        }
      ],
      "proprietary": false,
      "publicationTime": "2014-08-06T06:10:23Z",
      "references": [
        {
          "title": "Node Security Advisory",
          "url": "https://nodesecurity.io/advisories/28"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.0.0"
        ]
      },
      "severity": "medium",
      "title": "Denial of Service (DoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "qs@0.6.6"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "qs",
      "version": "0.6.6"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [
        "SNYK-JS-QS-10407"
      ],
      "creationTime": "2017-02-14T11:44:54.163000Z",
      "credit": [
        "Snyk Security Research Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
      "disclosureTime": "2017-02-13T00:00:00Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "6.0.4",
        "6.1.2",
        "6.2.3",
        "6.3.2"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "internals.parseObject"
          },
          "version": [
            "<6.0.4"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parseObject"
          },
          "version": [
            ">=6.2.0 <6.2.3",
            "6.3.0"
          ]
        },
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parseObjectRecursive"
          },
          "version": [
            ">=6.3.1 <6.3.2"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "internals.parseObject"
          },
          "version": [
            "<6.0.4"
          ]
        },
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parseObject"
          },
          "version": [
            ">=6.2.0 <6.2.3",
            "6.3.0"
          ]
        },
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parseObjectRecursive"
          },
          "version": [
            ">=6.3.1 <6.3.2"
          ]
        }
      ],
      "id": "npm:qs:20170213",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-QS-10407"
        ],
        "CVE": [
          "CVE-2017-1000048"
        ],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "js",
      "modificationTime": "2020-06-12T14:36:53.880024Z",
      "moduleName": "qs",
      "packageManager": "npm",
      "packageName": "qs",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:0",
          "modificationTime": "2019-12-03T11:40:45.855245Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch"
          ],
          "version": "=6.3.0"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:1",
          "modificationTime": "2019-12-03T11:40:45.856271Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch"
          ],
          "version": "=6.3.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:2",
          "modificationTime": "2019-12-03T11:40:45.857318Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch"
          ],
          "version": "=6.2.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:3",
          "modificationTime": "2019-12-03T11:40:45.858334Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch"
          ],
          "version": "=6.2.2"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:4",
          "modificationTime": "2019-12-03T11:40:45.859411Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch"
          ],
          "version": "=6.1.0"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:5",
          "modificationTime": "2019-12-03T11:40:45.860523Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch"
          ],
          "version": "=6.1.1"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:6",
          "modificationTime": "2019-12-03T11:40:45.861504Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch"
          ],
          "version": "=6.0.2"
        },
        {
          "comments": [],
          "id": "patch:npm:qs:20170213:7",
          "modificationTime": "2019-12-03T11:40:45.862615Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch"
          ],
          "version": "=6.0.3"
        }
      ],
      "proprietary": true,
      "publicationTime": "2017-03-01T10:00:54Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/ljharb/qs/issues/200"
        }
      ],
      "semver": {
        "vulnerable": [
          "<6.0.4",
          ">=6.1.0 <6.1.2",
          ">=6.2.0 <6.2.3",
          ">=6.3.0 <6.3.2"
        ]
      },
      "severity": "high",
      "title": "Prototype Override Protection Bypass",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "qs@0.6.6"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "qs",
      "version": "0.6.6"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [
        "SNYK-JS-SEND-10022"
      ],
      "creationTime": "2014-09-12T05:06:33Z",
      "credit": [
        "Ilya Kantor"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\n[send](https://www.npmjs.com/package/send) is a library for streaming files from the file system.\n\nAffected versions of this package are vulnerable to Directory-Traversal attacks due to insecure comparison.\nWhen relying on the root option to restrict file access a malicious user may escape out of the restricted directory and access files in a similarly named directory. For example, a path like `/my-secret` is consedered fine for the root `/my`.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\n \n\n## Remediation\nUpgrade to a version greater than or equal to 0.8.4.\n\n## References\n- [GitHub PR](https://github.com/visionmedia/send/pull/59)\n- [GitHub Commit](https://github.com/visionmedia/send/commit/9c6ca9b2c0b880afd3ff91ce0d211213c5fa5f9a)\n",
      "disclosureTime": "2014-09-12T05:06:33Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.8.4"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:send:20140912",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-SEND-10022"
        ],
        "CVE": [
          "CVE-2014-6394"
        ],
        "CWE": [
          "CWE-23"
        ],
        "NSP": [
          32
        ]
      },
      "language": "js",
      "modificationTime": "2019-05-30T14:12:44.213989Z",
      "moduleName": "send",
      "packageManager": "npm",
      "packageName": "send",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:send:20140912:0",
          "modificationTime": "2019-12-03T11:40:45.745668Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/send/20140912/send_20140912_0_0_9c6ca9b2c0b880afd3ff91ce0d211213c5fa_snyk.patch"
          ],
          "version": "< 0.8.4 >=0.7.3"
        }
      ],
      "proprietary": false,
      "publicationTime": "2014-09-12T05:06:33Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/send/commit/9c6ca9b2c0b880afd3ff91ce0d211213c5fa5f9a"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/send/pull/59"
        }
      ],
      "semver": {
        "vulnerable": [
          "< 0.8.4"
        ]
      },
      "severity": "medium",
      "title": "Directory Traversal",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "send@0.3.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "send",
      "version": "0.3.0"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-SEND-10056"
      ],
      "creationTime": "2015-11-06T02:09:36.183000Z",
      "credit": [
        "Dinis Cruz"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\n[Send](https://www.npmjs.com/package/send) is a library for streaming files from the file system as an http response. It supports partial responses (Ranges), conditional-GET negotiation, high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework.\r\n\r\nAffected versions of this package are vulnerable to a Root Path Disclosure.\r\n\r\n## Remediation\r\nUpgrade `send` to version 0.11.1 or higher. \r\n\r\n## References\r\n- [GitHub PR](https://github.com/pillarjs/send/pull/70)\r\n- [GitHub Commit](https://github.com/pillarjs/send/commit/98a5b89982b38e79db684177cf94730ce7fc7aed)\r\n- [GitHub History](https://github.com/expressjs/serve-static/blob/master/HISTORY.md#181--2015-01-20)\r\n- [Expressjs Security Update](http://expressjs.com/advanced/security-updates.html)",
      "disclosureTime": "2015-11-03T07:12:20Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.11.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:send:20151103",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-SEND-10056"
        ],
        "CVE": [
          "CVE-2015-8859"
        ],
        "CWE": [
          "CWE-200"
        ],
        "NSP": [
          56
        ]
      },
      "language": "js",
      "modificationTime": "2019-07-31T12:04:59.303893Z",
      "moduleName": "send",
      "packageManager": "npm",
      "packageName": "send",
      "patches": [
        {
          "comments": [
            "https://github.com/pillarjs/send/commit/98a5b89982b38e79db684177cf94730ce7fc7aed",
            "https://github.com/dxa4481/send/commit/6adc607a908fb95892e39ca366222d8e2951a4a4"
          ],
          "id": "patch:npm:send:20151103:0",
          "modificationTime": "2019-12-03T11:40:45.763186Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/send/20151103/send_20151103_0_1_98a5b89982b38e79db684177cf94730ce7fc7aed.patch"
          ],
          "version": "<0.11.1 >=0.9.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-11-06T02:09:36Z",
      "references": [
        {
          "title": "Expressjs Security Update",
          "url": "http://expressjs.com/advanced/security-updates.html"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/pillarjs/send/commit/98a5b89982b38e79db684177cf94730ce7fc7aed"
        },
        {
          "title": "GitHub History",
          "url": "https://github.com/expressjs/serve-static/blob/master/HISTORY.md%23181--2015-01-20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pillarjs/send/pull/70"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.11.1"
        ]
      },
      "severity": "medium",
      "title": "Root Path Disclosure",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "send@0.3.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "send",
      "version": "0.3.0"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [
        "SNYK-JS-SEND-10022"
      ],
      "creationTime": "2014-09-12T05:06:33Z",
      "credit": [
        "Ilya Kantor"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\n[send](https://www.npmjs.com/package/send) is a library for streaming files from the file system.\n\nAffected versions of this package are vulnerable to Directory-Traversal attacks due to insecure comparison.\nWhen relying on the root option to restrict file access a malicious user may escape out of the restricted directory and access files in a similarly named directory. For example, a path like `/my-secret` is consedered fine for the root `/my`.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\n \n\n## Remediation\nUpgrade to a version greater than or equal to 0.8.4.\n\n## References\n- [GitHub PR](https://github.com/visionmedia/send/pull/59)\n- [GitHub Commit](https://github.com/visionmedia/send/commit/9c6ca9b2c0b880afd3ff91ce0d211213c5fa5f9a)\n",
      "disclosureTime": "2014-09-12T05:06:33Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.8.4"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:send:20140912",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-SEND-10022"
        ],
        "CVE": [
          "CVE-2014-6394"
        ],
        "CWE": [
          "CWE-23"
        ],
        "NSP": [
          32
        ]
      },
      "language": "js",
      "modificationTime": "2019-05-30T14:12:44.213989Z",
      "moduleName": "send",
      "packageManager": "npm",
      "packageName": "send",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:send:20140912:0",
          "modificationTime": "2019-12-03T11:40:45.745668Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/send/20140912/send_20140912_0_0_9c6ca9b2c0b880afd3ff91ce0d211213c5fa_snyk.patch"
          ],
          "version": "< 0.8.4 >=0.7.3"
        }
      ],
      "proprietary": false,
      "publicationTime": "2014-09-12T05:06:33Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/visionmedia/send/commit/9c6ca9b2c0b880afd3ff91ce0d211213c5fa5f9a"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/visionmedia/send/pull/59"
        }
      ],
      "semver": {
        "vulnerable": [
          "< 0.8.4"
        ]
      },
      "severity": "medium",
      "title": "Directory Traversal",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "serve-static@1.1.0",
        "send@0.3.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "send",
      "version": "0.3.0"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-SEND-10056"
      ],
      "creationTime": "2015-11-06T02:09:36.183000Z",
      "credit": [
        "Dinis Cruz"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\n[Send](https://www.npmjs.com/package/send) is a library for streaming files from the file system as an http response. It supports partial responses (Ranges), conditional-GET negotiation, high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework.\r\n\r\nAffected versions of this package are vulnerable to a Root Path Disclosure.\r\n\r\n## Remediation\r\nUpgrade `send` to version 0.11.1 or higher. \r\n\r\n## References\r\n- [GitHub PR](https://github.com/pillarjs/send/pull/70)\r\n- [GitHub Commit](https://github.com/pillarjs/send/commit/98a5b89982b38e79db684177cf94730ce7fc7aed)\r\n- [GitHub History](https://github.com/expressjs/serve-static/blob/master/HISTORY.md#181--2015-01-20)\r\n- [Expressjs Security Update](http://expressjs.com/advanced/security-updates.html)",
      "disclosureTime": "2015-11-03T07:12:20Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "0.11.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:send:20151103",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-SEND-10056"
        ],
        "CVE": [
          "CVE-2015-8859"
        ],
        "CWE": [
          "CWE-200"
        ],
        "NSP": [
          56
        ]
      },
      "language": "js",
      "modificationTime": "2019-07-31T12:04:59.303893Z",
      "moduleName": "send",
      "packageManager": "npm",
      "packageName": "send",
      "patches": [
        {
          "comments": [
            "https://github.com/pillarjs/send/commit/98a5b89982b38e79db684177cf94730ce7fc7aed",
            "https://github.com/dxa4481/send/commit/6adc607a908fb95892e39ca366222d8e2951a4a4"
          ],
          "id": "patch:npm:send:20151103:0",
          "modificationTime": "2019-12-03T11:40:45.763186Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/send/20151103/send_20151103_0_1_98a5b89982b38e79db684177cf94730ce7fc7aed.patch"
          ],
          "version": "<0.11.1 >=0.9.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-11-06T02:09:36Z",
      "references": [
        {
          "title": "Expressjs Security Update",
          "url": "http://expressjs.com/advanced/security-updates.html"
        },
        {
          "title": "GitHub Commit",
          "url": "https://github.com/pillarjs/send/commit/98a5b89982b38e79db684177cf94730ce7fc7aed"
        },
        {
          "title": "GitHub History",
          "url": "https://github.com/expressjs/serve-static/blob/master/HISTORY.md%23181--2015-01-20"
        },
        {
          "title": "GitHub PR",
          "url": "https://github.com/pillarjs/send/pull/70"
        }
      ],
      "semver": {
        "vulnerable": [
          "<0.11.1"
        ]
      },
      "severity": "medium",
      "title": "Root Path Disclosure",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "serve-static@1.1.0",
        "send@0.3.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "send",
      "version": "0.3.0"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:N",
      "alternativeIds": [
        "SNYK-JS-SERVESTATIC-10032"
      ],
      "creationTime": "2015-01-13T12:50:48Z",
      "credit": [
        "Pierre-Élie Fauché"
      ],
      "cvssScore": 3.1,
      "description": "## Overview\r\n\r\nWhen using serve-static middleware version < 1.7.2 and it's configured to mount at the root, it creates an open redirect on the site.\r\n\r\n_Source: [Node Security Project](https://nodesecurity.io/advisories/35)_\r\n\r\n## Details\r\n\r\nFor example:\r\n\r\nIf a user visits `http://example.com//www.google.com/%2e%2e` they will be redirected to `//www.google.com/%2e%2e`, which some browsers interpret as `http://www.google.com/%2e%2e`.\r\n\r\n## Remediation\r\n\r\n  * Update to version 1.7.2 or greater (or 1.6.5 if sticking to the 1.6.x line).\r\n  * Disable redirects if not using the feature with 'redirect: false' option and cannot upgrade.\r\n\r\n## References\r\n\r\n- https://github.com/expressjs/serve-static/issues/26\r\n- https://www.owasp.org/index.php/Open_redirect",
      "disclosureTime": "2015-01-13T12:50:48Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "1.6.5",
        "1.7.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "npm:serve-static:20150113",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-SERVESTATIC-10032"
        ],
        "CVE": [
          "CVE-2015-1164"
        ],
        "CWE": [
          "CWE-601"
        ],
        "NSP": [
          35
        ]
      },
      "language": "js",
      "modificationTime": "2020-04-06T16:45:16.539079Z",
      "moduleName": "serve-static",
      "packageManager": "npm",
      "packageName": "serve-static",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:serve-static:20150113:0",
          "modificationTime": "2019-12-03T11:40:45.749791Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/serve-static/20150113/serve-static_20150113_0_0_0399e399935bab99530d6926094b4451438c2d50_snyk.patch"
          ],
          "version": ">=1.7.0 <1.7.2"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-01-13T12:50:48Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/expressjs/serve-static/issues/26"
        }
      ],
      "semver": {
        "vulnerable": [
          "<1.6.5",
          ">=1.7.0 <1.7.2"
        ]
      },
      "severity": "low",
      "title": "Open Redirect",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "express@4.2.0",
        "serve-static@1.1.0"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "serve-static",
      "version": "1.1.0"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L",
      "alternativeIds": [
        "SNYK-JS-UGLIFYJS-10041"
      ],
      "creationTime": "2015-08-24T09:29:10Z",
      "credit": [
        "Tom MacWright"
      ],
      "cvssScore": 8.3,
      "description": "## Overview\r\n[`uglify-js`](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\r\n\r\n[Tom MacWright](https://github.com/mishoo/UglifyJS2/issues/751) discovered that UglifyJS versions 2.4.23 and earlier are affected by a vulnerability which allows a specially crafted Javascript file to have altered functionality after minification. This bug was [demonstrated](https://zyan.scripts.mit.edu/blog/backdooring-js/) by [Yan](https://twitter.com/bcrypt) to allow potentially malicious code to be hidden within secure code, activated by minification.\r\n\r\n### Details\r\nIn Boolean algebra, DeMorgan's laws describe the relationships between conjunctions (`&&`), disjunctions (`||`) and negations (`!`).\r\nIn Javascript form, they state that:\r\n```savascript\r\n !(a && b) === (!a) || (!b)\r\n !(a || b) === (!a) && (!b)\r\n```\r\n\r\nThe law does not hold true when one of the values is not a boolean however.\r\n\r\nVulnerable versions of UglifyJS do not account for this restriction, and erroneously apply the laws to a statement if it can be reduced in length by it.\r\n\r\nConsider this authentication function:\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft =\r\n        !!config && // config object exists\r\n        !!user.token && // user object has a token\r\n        !user.token.invalidated && // token is not explicitly invalidated\r\n        !config.uninitialized && // config is initialized\r\n        !config.ignoreTimestamps && // don't ignore timestamps\r\n        getTimeLeft(user.token.expiry); // > 0 if expiration is in the future\r\n\r\n    // The token must not be expired\r\n    return timeLeft > 0;\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n  return expiry - getSystemTime();\r\n}\r\n```\r\nWhen minified with a vulnerable version of UglifyJS, it will produce the following insecure output, where a token will never expire:\r\n\r\n( Formatted for readability )\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft = !(                       // negation\r\n        !config                             // config object does not exist\r\n        || !user.token                      // user object does not have a token\r\n        || user.token.invalidated           // token is explicitly invalidated\r\n        || config.uninitialized             // config isn't initialized\r\n        || config.ignoreTimestamps          // ignore timestamps\r\n        || !getTimeLeft(user.token.expiry)  // > 0 if expiration is in the future\r\n    );\r\n    return timeLeft > 0\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n    return expiry - getSystemTime()\r\n}\r\n```\r\n\r\n## Remediation\r\nUpgrade UglifyJS to version `2.4.24` or higher.\r\n\r\n## References\r\n- [Blog Post](https://zyan.scripts.mit.edu/blog/backdooring-js/)\r\n- [GitHub Issue](https://github.com/mishoo/UglifyJS2/issues/751)",
      "disclosureTime": "2015-08-24T09:29:10Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.4.24"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/compress.js",
            "functionName": "Compressor"
          },
          "version": [
            ">=2.2.0 <2.4.24"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/compress.js",
            "functionName": "Compressor"
          },
          "version": [
            ">=2.2.0 <2.4.24"
          ]
        }
      ],
      "id": "npm:uglify-js:20150824",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-UGLIFYJS-10041"
        ],
        "CVE": [
          "CVE-2015-8857"
        ],
        "CWE": [
          "CWE-95"
        ],
        "NSP": [
          39
        ]
      },
      "language": "js",
      "modificationTime": "2019-04-30T15:19:20.298795Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [
        {
          "comments": [],
          "id": "patch:npm:uglify-js:20150824:0",
          "modificationTime": "2019-12-03T11:40:45.756528Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20150824/uglify-js_20150824_0_0_905b6011784ca60d41919ac1a499962b7c1d4b02_snyk.patch"
          ],
          "version": "<= 2.4.23 >2.0.0"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-08-24T09:29:10Z",
      "references": [
        {
          "title": "Blog Post",
          "url": "https://zyan.scripts.mit.edu/blog/backdooring-js/"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/mishoo/UglifyJS2/issues/751"
        }
      ],
      "semver": {
        "vulnerable": [
          ">=2.2.0 <2.4.24"
        ]
      },
      "severity": "high",
      "title": "Improper minification of non-boolean comparisons",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "jade@1.3.1",
        "transformers@2.1.0",
        "uglify-js@2.2.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "uglify-js",
      "version": "2.2.5"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-UGLIFYJS-10059"
      ],
      "creationTime": "2015-11-06T02:09:36.186000Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\nThe `parse()` function in the [`uglify-js`](https://www.npmjs.com/package/uglify-js) package prior to version 2.6.0 is vulnerable to regular expression denial of service (ReDoS) attacks when long inputs of certain patterns are processed.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n## Remediation\r\nUpgrade to version `2.6.0` or greater.\r\n\r\n## References\r\n- [OWASP - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)",
      "disclosureTime": "2015-10-24T21:01:32Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "id": "npm:uglify-js:20151024",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-UGLIFYJS-10059"
        ],
        "CVE": [
          "CVE-2015-8858"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          48
        ]
      },
      "language": "js",
      "modificationTime": "2019-03-05T10:54:37.391574Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:0",
          "modificationTime": "2019-12-03T11:40:45.767604Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk_inc.patch"
          ],
          "version": "<= 2.4.23 >=2.2.0"
        },
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:1",
          "modificationTime": "2019-12-03T11:40:45.768705Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk.patch"
          ],
          "version": "<2.6.0 >2.4.23"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-11-06T02:09:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mishoo/UglifyJS2/commit/63d35f8f6db6d90d6142132d2d5f0bd5d3d698aa"
        },
        {
          "title": "OWASP - ReDoS",
          "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.0"
        ]
      },
      "severity": "medium",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "jade@1.3.1",
        "transformers@2.1.0",
        "uglify-js@2.2.5"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "uglify-js",
      "version": "2.2.5"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-UGLIFYJS-10059"
      ],
      "creationTime": "2015-11-06T02:09:36.186000Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\nThe `parse()` function in the [`uglify-js`](https://www.npmjs.com/package/uglify-js) package prior to version 2.6.0 is vulnerable to regular expression denial of service (ReDoS) attacks when long inputs of certain patterns are processed.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n## Remediation\r\nUpgrade to version `2.6.0` or greater.\r\n\r\n## References\r\n- [OWASP - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)",
      "disclosureTime": "2015-10-24T21:01:32Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "id": "npm:uglify-js:20151024",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-UGLIFYJS-10059"
        ],
        "CVE": [
          "CVE-2015-8858"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          48
        ]
      },
      "language": "js",
      "modificationTime": "2019-03-05T10:54:37.391574Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:0",
          "modificationTime": "2019-12-03T11:40:45.767604Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk_inc.patch"
          ],
          "version": "<= 2.4.23 >=2.2.0"
        },
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:1",
          "modificationTime": "2019-12-03T11:40:45.768705Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk.patch"
          ],
          "version": "<2.6.0 >2.4.23"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-11-06T02:09:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mishoo/UglifyJS2/commit/63d35f8f6db6d90d6142132d2d5f0bd5d3d698aa"
        },
        {
          "title": "OWASP - ReDoS",
          "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.0"
        ]
      },
      "severity": "medium",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "jade@1.3.1",
        "constantinople@2.0.1",
        "uglify-js@2.4.24"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "uglify-js",
      "version": "2.4.24"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [
        "SNYK-JS-UGLIFYJS-10059"
      ],
      "creationTime": "2015-11-06T02:09:36.186000Z",
      "credit": [
        "Adam Baldwin"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\nThe `parse()` function in the [`uglify-js`](https://www.npmjs.com/package/uglify-js) package prior to version 2.6.0 is vulnerable to regular expression denial of service (ReDoS) attacks when long inputs of certain patterns are processed.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n## Remediation\r\nUpgrade to version `2.6.0` or greater.\r\n\r\n## References\r\n- [OWASP - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)",
      "disclosureTime": "2015-10-24T21:01:32Z",
      "exploit": "Not Defined",
      "fixedIn": [
        "2.6.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": null,
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "filePath": "lib/parse.js",
            "functionName": "parse_js_number"
          },
          "version": [
            ">1.3.5 <2.6.0"
          ]
        }
      ],
      "id": "npm:uglify-js:20151024",
      "identifiers": {
        "ALTERNATIVE": [
          "SNYK-JS-UGLIFYJS-10059"
        ],
        "CVE": [
          "CVE-2015-8858"
        ],
        "CWE": [
          "CWE-400"
        ],
        "NSP": [
          48
        ]
      },
      "language": "js",
      "modificationTime": "2019-03-05T10:54:37.391574Z",
      "moduleName": "uglify-js",
      "packageManager": "npm",
      "packageName": "uglify-js",
      "patches": [
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:0",
          "modificationTime": "2019-12-03T11:40:45.767604Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk_inc.patch"
          ],
          "version": "<= 2.4.23 >=2.2.0"
        },
        {
          "comments": [
            "https://github.com/mishoo/UglifyJS2/commit/63d35f8.patch"
          ],
          "id": "patch:npm:uglify-js:20151024:1",
          "modificationTime": "2019-12-03T11:40:45.768705Z",
          "urls": [
            "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20151024/uglify-js_20151024_0_0_63d35f8_snyk.patch"
          ],
          "version": "<2.6.0 >2.4.23"
        }
      ],
      "proprietary": false,
      "publicationTime": "2015-11-06T02:09:36Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/mishoo/UglifyJS2/commit/63d35f8f6db6d90d6142132d2d5f0bd5d3d698aa"
        },
        {
          "title": "OWASP - ReDoS",
          "url": "https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"
        }
      ],
      "semver": {
        "vulnerable": [
          "<2.6.0"
        ]
      },
      "severity": "medium",
      "title": "Regular Expression Denial of Service (ReDoS)",
      "from": [
        "test-app@1.0.0",
        "mock2easy@0.0.24",
        "jade@1.3.1",
        "with@3.0.1",
        "uglify-js@2.4.24"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": true,
      "name": "uglify-js",
      "version": "2.4.24"
    }
  ],
  "ok": false,
  "dependencyCount": 454,
  "org": "aldanchenko",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.19.0\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {},
    "orgLicenseRules": {
      "AGPL-1.0": {
        "licenseType": "AGPL-1.0",
        "severity": "high",
        "instructions": ""
      },
      "AGPL-3.0": {
        "licenseType": "AGPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "Artistic-1.0": {
        "licenseType": "Artistic-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "Artistic-2.0": {
        "licenseType": "Artistic-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "CDDL-1.0": {
        "licenseType": "CDDL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "CPOL-1.02": {
        "licenseType": "CPOL-1.02",
        "severity": "high",
        "instructions": ""
      },
      "EPL-1.0": {
        "licenseType": "EPL-1.0",
        "severity": "medium",
        "instructions": ""
      },
      "GPL-2.0": {
        "licenseType": "GPL-2.0",
        "severity": "high",
        "instructions": ""
      },
      "GPL-3.0": {
        "licenseType": "GPL-3.0",
        "severity": "high",
        "instructions": ""
      },
      "LGPL-2.0": {
        "licenseType": "LGPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1": {
        "licenseType": "LGPL-2.1",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0": {
        "licenseType": "LGPL-3.0",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-2.1+": {
        "licenseType": "LGPL-2.1+",
        "severity": "medium",
        "instructions": ""
      },
      "LGPL-3.0+": {
        "licenseType": "LGPL-3.0+",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-1.1": {
        "licenseType": "MPL-1.1",
        "severity": "medium",
        "instructions": ""
      },
      "MPL-2.0": {
        "licenseType": "MPL-2.0",
        "severity": "medium",
        "instructions": ""
      },
      "MS-RL": {
        "licenseType": "MS-RL",
        "severity": "medium",
        "instructions": ""
      },
      "SimPL-2.0": {
        "licenseType": "SimPL-2.0",
        "severity": "high",
        "instructions": ""
      }
    }
  },
  "packageManager": "npm",
  "ignoreSettings": null,
  "summary": "36 vulnerable dependency paths",
  "remediation": {
    "unresolved": [
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L/E:P/RL:O/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-01-28T15:18:37.743372Z",
        "credit": [
          "aaron_costello"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\n[dot-prop](https://github.com/sindresorhus/dot-prop#readme) is a package to get, set, or delete a property from a nested object using a dot path.\n\nAffected versions of this package are vulnerable to Prototype Pollution. It is possible for a user to modify the prototype of a base object.\r\n\r\n## PoC by aaron_costello \r\n```\r\nvar dotProp = require(\"dot-prop\")\r\nconst object = {};\r\nconsole.log(\"Before \" + object.b); //Undefined\r\ndotProp.set(object, '__proto__.b', true);\r\nconsole.log(\"After \" + {}.b); //true\r\n```\n\n## Details\n\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\n\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\n\nLet’s take the following regular expression as an example:\n```js\nregex = /A(B|C+)+D/\n```\n\nThis regular expression accomplishes the following:\n- `A` The string must start with the letter 'A'\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\n- `D` Finally, we ensure this section of the string ends with a 'D'\n\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\n\nIt most cases, it doesn't take very long for a regex engine to find a match:\n\n```bash\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\n0.04s user 0.01s system 95% cpu 0.052 total\n\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\n1.79s user 0.02s system 99% cpu 1.812 total\n```\n\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\n\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\n\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\n1. CCC\n2. CC+C\n3. C+CC\n4. C+C+C.\n\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\n\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\n\n| String | Number of C's | Number of steps |\n| -------|-------------:| -----:|\n| ACCCX | 3 | 38\n| ACCCCX | 4 | 71\n| ACCCCCX | 5 | 136\n| ACCCCCCCCCCCCCCX | 14 | 65,553\n\n\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\nUpgrade `dot-prop` to version 5.1.1 or higher.\n## References\n- [GitHub Commit](https://github.com/sindresorhus/dot-prop/commit/3039c8c07f6fdaa8b595ec869ae0895686a7a0f2)\n- [HackerOne Report](https://hackerone.com/reports/719856)\n",
        "disclosureTime": "2020-01-28T10:17:51Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "5.1.1"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "module.exports.set"
            },
            "version": [
              ">1.0.1 <5.1.1"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "module.exports.set"
            },
            "version": [
              ">1.0.1 <5.1.1"
            ]
          }
        ],
        "id": "SNYK-JS-DOTPROP-543489",
        "identifiers": {
          "CVE": [
            "CVE-2020-8116"
          ],
          "CWE": [
            "CWE-400"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:37:04.659368Z",
        "moduleName": "dot-prop",
        "packageManager": "npm",
        "packageName": "dot-prop",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2020-01-28T16:23:39Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/sindresorhus/dot-prop/commit/3039c8c07f6fdaa8b595ec869ae0895686a7a0f2"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/719856"
          }
        ],
        "semver": {
          "vulnerable": [
            ">1.0.1 <5.1.1"
          ]
        },
        "severity": "medium",
        "title": "Prototype Pollution",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "nodemon@1.19.4",
          "update-notifier@2.5.0",
          "configstore@3.1.2",
          "dot-prop@4.2.0"
        ],
        "upgradePath": [
          false,
          "mock2easy@0.0.24",
          "nodemon@1.19.4",
          "update-notifier@2.5.0",
          "configstore@3.1.4"
        ],
        "isUpgradable": true,
        "isPatchable": false,
        "isPinnable": false,
        "name": "dot-prop",
        "version": "4.2.0"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:U/RL:U/RC:C",
        "alternativeIds": [],
        "creationTime": "2020-06-15T09:37:01.325929Z",
        "credit": [
          "Snyk Security Team"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n\nAffected versions of this package are vulnerable to Command Injection a malicious user could inject commands through the `_data` variable:\r\n\r\n### Affected Area\r\n```\r\n    require('../server/getJsonByCurl')(mock2easy, function (error, stdout) {\r\n      if (error) {\r\n        return  res.json(500, error);\r\n      }\r\n      res.json(JSON.parse(stdout));\r\n    }, '', _data.interfaceUrl, query, _data.cookie,_data.interfaceType);\r\n```\n## Remediation\nThere is no fixed version for `mock2easy`.\n## References\n- [mock2easy Homepage](https://www.npmjs.com/package/mock2easy)\n",
        "disclosureTime": "2020-06-15T07:44:56Z",
        "exploit": "Unproven",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-MOCK2EASY-572312",
        "identifiers": {
          "CVE": [
            "CVE-2020-7697"
          ],
          "CWE": [
            "CWE-79"
          ]
        },
        "language": "js",
        "modificationTime": "2020-07-23T12:25:45.676022Z",
        "moduleName": "mock2easy",
        "packageManager": "npm",
        "packageName": "mock2easy",
        "patches": [],
        "proprietary": true,
        "publicationTime": "2020-07-23T12:25:45Z",
        "references": [
          {
            "title": "mock2easy Homepage",
            "url": "https://www.npmjs.com/package/mock2easy"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "high",
        "title": "Command Injection",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "mock2easy",
        "version": "0.0.24"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:N",
        "alternativeIds": [
          "SNYK-JS-MOCK2EASY-10496"
        ],
        "creationTime": "2017-04-30T10:25:31.315000Z",
        "credit": [
          "Cristian-Alexandru Staicu",
          "Michael Pradel",
          "Ben Livshits"
        ],
        "cvssScore": 6.5,
        "description": "## Overview\n[`mock2easy`](https://www.npmjs.com/package/mock2easy) dynamically generates static interfaces, making them live with MockJSmongui.\n\nAffected versions of the package are vulnerable to Arbitrary Code Injection due to unsafe use of the `eval()` function. Node.js provides the `eval()` function by default, and is used to translate strings into Javascript code. An attacker can craft a malicious payload to inject arbitrary commands.\n\n## Remediation\nThere is no fix version for `mock2easy`.\n\n## References\n- [GitHub Issue](https://github.com/appLhui/mock2easy/issues/2)\n- [Research Paper - Understanding and Automatically Preventing Injection Attacks on Node.js](http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_07A-2_Staicu_paper.pdf)\n",
        "disclosureTime": "2016-04-08T21:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [],
        "functions": [],
        "functions_new": [],
        "id": "npm:mock2easy:20160408",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-MOCK2EASY-10496"
          ],
          "CVE": [],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "js",
        "modificationTime": "2018-11-18T11:50:41.027923Z",
        "moduleName": "mock2easy",
        "packageManager": "npm",
        "packageName": "mock2easy",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-05-01T07:50:31.315000Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/appLhui/mock2easy/issues/2"
          },
          {
            "title": "Research Paper - Understanding and Automatically Preventing Injection Attacks on Node.js",
            "url": "http://wp.internetsociety.org/ndss/wp-content/uploads/sites/25/2018/02/ndss2018_07A-2_Staicu_paper.pdf"
          }
        ],
        "semver": {
          "vulnerable": [
            "*"
          ]
        },
        "severity": "medium",
        "title": "Arbitrary Code Injection",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "mock2easy",
        "version": "0.0.24"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:A/AC:H/PR:L/UI:R/S:U/C:H/I:H/A:H/E:P",
        "alternativeIds": [],
        "creationTime": "2018-11-11T12:38:44.575882Z",
        "credit": [
          "Unknown"
        ],
        "cvssScore": 6.8,
        "description": "## Overview\n[morgan](https://www.npmjs.com/package/morgan) is a HTTP request logger middleware for node.js.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection. An attacker could use the format parameter to inject arbitrary commands.\n## Remediation\nUpgrade `morgan` to version 1.9.1 or higher.\n## References\n- [GitHub Commit](https://github.com/expressjs/morgan/commit/e329663836809de4be557b200a5b983ab8b4e6c2)\n- [HackerOne Report](https://hackerone.com/reports/390881)\n",
        "disclosureTime": "2018-11-09T12:12:59Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "1.9.1"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "compile"
            },
            "version": [
              "<1.9.1"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "compile"
            },
            "version": [
              "<1.9.1"
            ]
          }
        ],
        "id": "SNYK-JS-MORGAN-72579",
        "identifiers": {
          "CVE": [
            "CVE-2019-5413"
          ],
          "CWE": [
            "CWE-94"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:37:02.657540Z",
        "moduleName": "morgan",
        "packageManager": "npm",
        "packageName": "morgan",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-11-12T17:29:35Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/expressjs/morgan/commit/e329663836809de4be557b200a5b983ab8b4e6c2"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/390881"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.9.1"
          ]
        },
        "severity": "medium",
        "title": "Arbitrary Code Injection",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "morgan@1.0.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "morgan",
        "version": "1.0.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/RL:O",
        "alternativeIds": [],
        "creationTime": "2019-03-31T10:27:47.709659Z",
        "credit": [
          "ChaLKer"
        ],
        "cvssScore": 9.8,
        "description": "## Overview\n[open](https://www.npmjs.com/package/open) is a cross platform package that opens stuff like URLs, files, executables.\n\nAffected versions of this package are vulnerable to Arbitrary Code Injection when unsanitized user input is passed in.\r\n\r\nThe package does come with the following warning in the readme:\r\n\r\n```\r\nThe same care should be taken when calling open as if you were calling child_process.exec directly. If it is an executable it will run in a new shell.\r\n```\r\nThe package `open` is replacing the `opn` package, which is now deprecated. The older versions of `open` are vulnerable. \r\n\r\n**Note: Upgrading `open` to the last version will prevent this vulnerability but is also likely to have unwanted effects since it now has a very different API.**\n## Remediation\nUpgrade `open` to version 6.0.0 or higher.\n## References\n- [GitHub Issue](https://github.com/pwnall/node-open/issues/68)\n- [HackerOne Report](https://hackerone.com/reports/319473)\n- [NPM Security Advisory](https://www.npmjs.com/advisories/663)\n",
        "disclosureTime": "2018-05-16T19:36:39Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "6.0.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "SNYK-JS-OPEN-174041",
        "identifiers": {
          "CVE": [],
          "CWE": [
            "CWE-94"
          ],
          "GHSA": [
            "GHSA-28xh-wpgr-7fm8"
          ],
          "NSP": [
            663
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:55.653898Z",
        "moduleName": "open",
        "packageManager": "npm",
        "packageName": "open",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2019-03-31T10:33:37Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/pwnall/node-open/issues/68"
          },
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/319473"
          },
          {
            "title": "NPM Security Advisory",
            "url": "https://www.npmjs.com/advisories/663"
          }
        ],
        "semver": {
          "vulnerable": [
            "<6.0.0"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Code Injection",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "open@0.0.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "open",
        "version": "0.0.5"
      },
      {
        "CVSSv3": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H/E:P/RL:O/RC:C",
        "alternativeIds": [
          "SNYK-JS-OPEN-12148"
        ],
        "creationTime": "2018-02-25T11:54:41.573000Z",
        "credit": [
          "ChALkeR"
        ],
        "cvssScore": 8.4,
        "description": "## Overview\n[open](https://www.npmjs.com/package/open) is a cross platform package that opens stuff like URLs, files, executables.\n\nAffected versions of this package are vulnerable to Arbitrary Command Injection. Urls are not properly escaped before concatenating them into the command that is opened using `exec()`.\r\n\r\n**Note: Upgrading `open` to the last version will prevent this vulnerability but is also likely to have unwanted effects since it now has a very different API.**\n## Remediation\nUpgrade `open` to version 6.0.0 or higher.\n## References\n- [HackerOne Report](https://hackerone.com/reports/319473)\n",
        "disclosureTime": "2018-05-12T11:54:41Z",
        "exploit": "Proof of Concept",
        "fixedIn": [
          "6.0.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:open:20180512",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-OPEN-12148"
          ],
          "CVE": [],
          "CWE": [
            "CWE-264"
          ],
          "NSP": [
            663
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T08:52:32.287783Z",
        "moduleName": "open",
        "packageManager": "npm",
        "packageName": "open",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-05-13T14:26:27Z",
        "references": [
          {
            "title": "HackerOne Report",
            "url": "https://hackerone.com/reports/319473"
          }
        ],
        "semver": {
          "vulnerable": [
            "<6.0.0"
          ]
        },
        "severity": "high",
        "title": "Arbitrary Command Injection",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "open@0.0.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "open",
        "version": "0.0.5"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:N",
        "alternativeIds": [
          "SNYK-JS-CONSTANTINOPLE-12136"
        ],
        "creationTime": "2018-03-02T16:46:56.854000Z",
        "credit": [
          "Mike Samuel"
        ],
        "cvssScore": 10,
        "description": "## Overview\r\n[`constantinople`](https://www.npmjs.com/package/constantinople) determines whether a JavaScript expression evaluates to a constant (using acorn).\r\n\r\nAffected versions of this package are vulnerable to a sandbox bypass which can lead to arbitrary code execution.\r\n\r\n## Remediation\r\nUpgrade `constantinople` to version 3.1.1 or higher.\r\n\r\n## References\r\n- [NSP Advisory](https://nodesecurity.io/advisories/568)",
        "disclosureTime": "2018-04-21T04:33:52Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.1.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:constantinople:20180421",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-CONSTANTINOPLE-12136"
          ],
          "CVE": [],
          "CWE": [
            "CWE-264"
          ],
          "GHSA": [
            "GHSA-4vmm-mhcq-4x9j"
          ],
          "NSP": [
            568
          ]
        },
        "language": "js",
        "modificationTime": "2019-06-02T07:14:02.722430Z",
        "moduleName": "constantinople",
        "packageManager": "npm",
        "packageName": "constantinople",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2018-05-09T16:11:26Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/pugjs/constantinople/commit/01d409c0d081dfd65223e6b7767c244156d35f7f"
          },
          {
            "title": "NSP Advisory",
            "url": "https://nodesecurity.io/advisories/568"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.1.1"
          ]
        },
        "severity": "high",
        "title": "Sandbox Bypass",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "jade@1.3.1",
          "constantinople@2.0.1"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "constantinople",
        "version": "2.0.1"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-COOKIESIGNATURE-10134"
        ],
        "creationTime": "2016-08-04T03:44:13.904000Z",
        "credit": [
          "tenbits"
        ],
        "cvssScore": 6.3,
        "description": "## Overview\r\n['cookie-signature'](https://www.npmjs.com/package/cookie-signature) is a library for signing cookies.\r\n\r\nVersions before `1.0.4` of the library use the built-in string comparison mechanism, `===`, and not a time constant string comparison. As a result, the comparison will fail faster when the first characters in the token are incorrect.\r\nAn attacker can use this difference to perform a timing attack, essentially allowing them to guess the secret one character at a time.\r\n\r\nYou can read more about timing attacks in Node.js on the Snyk blog: https://snyk.io/blog/node-js-timing-attack-ccc-ctf/\r\n\r\n## Remediation\r\nUpgrade to `1.0.4` or greater.\r\n\r\n## References\r\n- [GitHub History](https://github.com/tj/node-cookie-signature/blob/master/History.md#104--2014-06-25)\r\n- [GitHub Commit](https://github.com/tj/node-cookie-signature/commit/39791081692e9e14aa62855369e1c7f80fbfd50e)",
        "disclosureTime": "2014-01-28T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.0.4"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:cookie-signature:20160804",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-COOKIESIGNATURE-10134"
          ],
          "CVE": [
            "CVE-2016-1000236"
          ],
          "CWE": [
            "CWE-208"
          ],
          "NSP": [
            134
          ]
        },
        "language": "js",
        "modificationTime": "2019-12-02T14:38:46.070625Z",
        "moduleName": "cookie-signature",
        "packageManager": "npm",
        "packageName": "cookie-signature",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2016-08-29T00:00:00Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/tj/node-cookie-signature/commit/39791081692e9e14aa62855369e1c7f80fbfd50e"
          },
          {
            "title": "GitHub History",
            "url": "https://github.com/tj/node-cookie-signature/blob/master/History.md%23104--2014-06-25"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.0.4"
          ]
        },
        "severity": "medium",
        "title": "Non-Constant Time String Comparison",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "express@4.2.0",
          "cookie-signature@1.0.3"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "cookie-signature",
        "version": "1.0.3"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N",
        "alternativeIds": [
          "SNYK-JS-EXPRESS-10021"
        ],
        "creationTime": "2014-09-12T04:46:45Z",
        "credit": [
          "Paweł Hałdrzyński"
        ],
        "cvssScore": 5.4,
        "description": "## Overview\r\n[`express`](https://www.npmjs.com/package/express) is a minimalist web framework.\r\n\r\nAffected versions of this package do not enforce the user's browser to set a specific charset in the content-type header while displaying 400 level response messages. This could be used by remote attackers to perform a cross-site scripting attack, by using non-standard encodings like UTF-7.\r\n\r\n## Details\r\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\r\n\r\n\r\n## Recommendations\r\nUpdate express to `3.11.0`, `4.5.0` or higher.\r\n\r\n## References\r\n- [GitHub release 3.11.0](https://github.com/expressjs/express/releases/tag/3.11.0)\r\n- [GitHub release 4.5.0](https://github.com/expressjs/express/releases/tag/4.5.0)",
        "disclosureTime": "2014-09-12T04:46:45Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "3.11.0",
          "4.5.0"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:express:20140912",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-EXPRESS-10021"
          ],
          "CVE": [
            "CVE-2014-6393"
          ],
          "CWE": [
            "CWE-79"
          ],
          "NSP": [
            8
          ]
        },
        "language": "js",
        "modificationTime": "2019-11-20T10:01:33.495787Z",
        "moduleName": "express",
        "packageManager": "npm",
        "packageName": "express",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2014-09-12T04:46:45Z",
        "references": [
          {
            "title": "GitHub Release",
            "url": "https://github.com/expressjs/express/releases/tag/3.11.0"
          },
          {
            "title": "GitHub Release",
            "url": "https://github.com/expressjs/express/releases/tag/4.5.0"
          }
        ],
        "semver": {
          "vulnerable": [
            "<3.11.0",
            ">=4.0.0 <4.5.0"
          ]
        },
        "severity": "medium",
        "title": "Cross-site Scripting (XSS)",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "express@4.2.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "express",
        "version": "4.2.0"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-FRESH-10791"
        ],
        "creationTime": "2017-09-27T08:48:49.286000Z",
        "credit": [
          "Cristian-Alexandru Staicu"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\r\n[`fresh`](https://www.npmjs.com/package/fresh) is HTTP response freshness testing.\r\n\r\nAffected versions of this package are vulnerable to Regular expression Denial of Service (ReDoS) attacks. A Regular Expression (`/ *, */`) was used for parsing HTTP headers and take about 2 seconds matching time for 50k characters.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\r\n\r\n\r\n## Remediation\r\nUpgrade `fresh` to version 0.5.2 or higher.\n\n## References\n- [GitHub Commit](https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec)\n- [GitHub Issue](https://github.com/jshttp/fresh/issues/24)\n",
        "disclosureTime": "2017-09-08T21:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.5.2"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "fresh"
            },
            "version": [
              "<0.5.2"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "fresh"
            },
            "version": [
              "<0.5.2"
            ]
          }
        ],
        "id": "npm:fresh:20170908",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-FRESH-10791"
          ],
          "CVE": [
            "CVE-2017-16119"
          ],
          "CWE": [
            "CWE-400"
          ],
          "NSP": [
            526
          ]
        },
        "language": "js",
        "modificationTime": "2019-12-02T14:39:00.441028Z",
        "moduleName": "fresh",
        "packageManager": "npm",
        "packageName": "fresh",
        "patches": [],
        "proprietary": false,
        "publicationTime": "2017-09-27T08:48:49Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/jshttp/fresh/commit/21a0f0c2a5f447e0d40bc16be0c23fa98a7b46ec"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/jshttp/fresh/issues/24"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.5.2"
          ]
        },
        "severity": "high",
        "title": "Regular Expression Denial of Service (ReDoS)",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "express@4.2.0",
          "serve-static@1.1.0",
          "send@0.3.0",
          "fresh@0.2.2"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "fresh",
        "version": "0.2.2"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-QS-10019"
        ],
        "creationTime": "2014-08-06T06:10:22Z",
        "credit": [
          "Dustin Shiver"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nDuring parsing, the `qs` module may create a sparse area (an array where no elements are filled), and grow that array to the necessary size based on the indices used on it. An attacker can specify a high index value in a query string, thus making the server allocate a respectively big array. Truly large values can cause the server to run out of memory and cause it to crash - thus enabling a Denial-of-Service attack.\n\n## Remediation\n\nUpgrade `qs` to version 1.0.0 or higher.\n\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## References\n\n- [GitHub Commit](https://github.com/tj/node-querystring/pull/114/commits/43a604b7847e56bba49d0ce3e222fe89569354d8)\n\n- [GitHub Issue](https://github.com/visionmedia/node-querystring/issues/104)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2014-7191)\n",
        "disclosureTime": "2014-08-06T06:10:22Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.0.0"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "index.js",
              "functionName": "compact"
            },
            "version": [
              "<1.0.0"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "index.js",
              "functionName": "compact"
            },
            "version": [
              "<1.0.0"
            ]
          }
        ],
        "id": "npm:qs:20140806",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-QS-10019"
          ],
          "CVE": [
            "CVE-2014-7191"
          ],
          "CWE": [
            "CWE-400"
          ],
          "GHSA": [
            "GHSA-gqgv-6jq5-jjj9"
          ],
          "NSP": [
            29
          ]
        },
        "language": "js",
        "modificationTime": "2019-02-18T08:28:59.375824Z",
        "moduleName": "qs",
        "packageManager": "npm",
        "packageName": "qs",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:qs:20140806:1",
            "modificationTime": "2019-12-03T11:40:45.728930Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20140806/qs_20140806_0_1_snyk_npm.patch"
            ],
            "version": "=0.5.6"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20140806:0",
            "modificationTime": "2019-12-03T11:40:45.741062Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20140806/qs_20140806_0_0_43a604b7847e56bba49d0ce3e222fe89569354d8_snyk.patch"
            ],
            "version": "<1.0.0 >=0.6.5"
          }
        ],
        "proprietary": false,
        "publicationTime": "2014-08-06T06:10:22Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/tj/node-querystring/pull/114/commits/43a604b7847e56bba49d0ce3e222fe89569354d8"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/visionmedia/node-querystring/issues/104"
          },
          {
            "title": "NVD",
            "url": "https://nvd.nist.gov/vuln/detail/CVE-2014-7191"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.0.0"
          ]
        },
        "severity": "high",
        "title": "Denial of Service (DoS)",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "express@4.2.0",
          "qs@0.6.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": true,
        "isPinnable": false,
        "name": "qs",
        "version": "0.6.6"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
        "alternativeIds": [
          "SNYK-JS-QS-10407"
        ],
        "creationTime": "2017-02-14T11:44:54.163000Z",
        "credit": [
          "Snyk Security Research Team"
        ],
        "cvssScore": 7.5,
        "description": "## Overview\n[qs](https://www.npmjs.com/package/qs) is a querystring parser that supports nesting and arrays, with a depth limit.\n\nAffected versions of this package are vulnerable to Prototype Override Protection Bypass. By default `qs` protects against attacks that attempt to overwrite an object's existing prototype properties, such as `toString()`, `hasOwnProperty()`,etc.\r\n\r\nFrom [`qs` documentation](https://github.com/ljharb/qs):\r\n> By default parameters that would overwrite properties on the object prototype are ignored, if you wish to keep the data from those fields either use plainObjects as mentioned above, or set allowPrototypes to true which will allow user input to overwrite those properties. WARNING It is generally a bad idea to enable this option as it can cause problems when attempting to use the properties that have been overwritten. Always be careful with this option.\r\n\r\nOverwriting these properties can impact application logic, potentially allowing attackers to work around security controls, modify data, make the application unstable and more.\r\n\r\nIn versions of the package affected by this vulnerability, it is possible to circumvent this protection and overwrite prototype properties and functions by prefixing the name of the parameter with `[` or `]`. e.g. `qs.parse(\"]=toString\")` will return `{toString = true}`, as a result, calling `toString()` on the object will throw an exception.\r\n\r\n**Example:**\r\n```js\r\nqs.parse('toString=foo', { allowPrototypes: false })\r\n// {}\r\n\r\nqs.parse(\"]=toString\", { allowPrototypes: false })\r\n// {toString = true} <== prototype overwritten\r\n```\r\n\r\nFor more information, you can check out our [blog](https://snyk.io/blog/high-severity-vulnerability-qs/).\r\n\r\n## Disclosure Timeline\r\n- February 13th, 2017 - Reported the issue to package owner.\r\n- February 13th, 2017 - Issue acknowledged by package owner.\r\n- February 16th, 2017 - Partial fix released in versions `6.0.3`, `6.1.1`, `6.2.2`, `6.3.1`.\r\n- March 6th, 2017     - Final fix released in versions `6.4.0`,`6.3.2`, `6.2.3`, `6.1.2` and `6.0.4`\n## Remediation\nUpgrade `qs` to version 6.0.4, 6.1.2, 6.2.3, 6.3.2 or higher.\n## References\n- [GitHub Commit](https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d)\n- [GitHub Issue](https://github.com/ljharb/qs/issues/200)\n",
        "disclosureTime": "2017-02-13T00:00:00Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "6.0.4",
          "6.1.2",
          "6.2.3",
          "6.3.2"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/parse.js",
              "functionName": "internals.parseObject"
            },
            "version": [
              "<6.0.4"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "lib/parse.js",
              "functionName": "parseObject"
            },
            "version": [
              ">=6.2.0 <6.2.3",
              "6.3.0"
            ]
          },
          {
            "functionId": {
              "className": null,
              "filePath": "lib/parse.js",
              "functionName": "parseObjectRecursive"
            },
            "version": [
              ">=6.3.1 <6.3.2"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "internals.parseObject"
            },
            "version": [
              "<6.0.4"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "parseObject"
            },
            "version": [
              ">=6.2.0 <6.2.3",
              "6.3.0"
            ]
          },
          {
            "functionId": {
              "filePath": "lib/parse.js",
              "functionName": "parseObjectRecursive"
            },
            "version": [
              ">=6.3.1 <6.3.2"
            ]
          }
        ],
        "id": "npm:qs:20170213",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-QS-10407"
          ],
          "CVE": [
            "CVE-2017-1000048"
          ],
          "CWE": [
            "CWE-20"
          ]
        },
        "language": "js",
        "modificationTime": "2020-06-12T14:36:53.880024Z",
        "moduleName": "qs",
        "packageManager": "npm",
        "packageName": "qs",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:0",
            "modificationTime": "2019-12-03T11:40:45.855245Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/630_632.patch"
            ],
            "version": "=6.3.0"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:1",
            "modificationTime": "2019-12-03T11:40:45.856271Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/631_632.patch"
            ],
            "version": "=6.3.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:2",
            "modificationTime": "2019-12-03T11:40:45.857318Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/621_623.patch"
            ],
            "version": "=6.2.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:3",
            "modificationTime": "2019-12-03T11:40:45.858334Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/622_623.patch"
            ],
            "version": "=6.2.2"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:4",
            "modificationTime": "2019-12-03T11:40:45.859411Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/610_612.patch"
            ],
            "version": "=6.1.0"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:5",
            "modificationTime": "2019-12-03T11:40:45.860523Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/611_612.patch"
            ],
            "version": "=6.1.1"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:6",
            "modificationTime": "2019-12-03T11:40:45.861504Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/602_604.patch"
            ],
            "version": "=6.0.2"
          },
          {
            "comments": [],
            "id": "patch:npm:qs:20170213:7",
            "modificationTime": "2019-12-03T11:40:45.862615Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/qs/20170213/603_604.patch"
            ],
            "version": "=6.0.3"
          }
        ],
        "proprietary": true,
        "publicationTime": "2017-03-01T10:00:54Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/ljharb/qs/commit/beade029171b8cef9cee0d03ebe577e2dd84976d"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/ljharb/qs/issues/200"
          }
        ],
        "semver": {
          "vulnerable": [
            "<6.0.4",
            ">=6.1.0 <6.1.2",
            ">=6.2.0 <6.2.3",
            ">=6.3.0 <6.3.2"
          ]
        },
        "severity": "high",
        "title": "Prototype Override Protection Bypass",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "express@4.2.0",
          "qs@0.6.6"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "qs",
        "version": "0.6.6"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
        "alternativeIds": [
          "SNYK-JS-SEND-10022"
        ],
        "creationTime": "2014-09-12T05:06:33Z",
        "credit": [
          "Ilya Kantor"
        ],
        "cvssScore": 4.3,
        "description": "## Overview\n[send](https://www.npmjs.com/package/send) is a library for streaming files from the file system.\n\nAffected versions of this package are vulnerable to Directory-Traversal attacks due to insecure comparison.\nWhen relying on the root option to restrict file access a malicious user may escape out of the restricted directory and access files in a similarly named directory. For example, a path like `/my-secret` is consedered fine for the root `/my`.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\n \n\n## Remediation\nUpgrade to a version greater than or equal to 0.8.4.\n\n## References\n- [GitHub PR](https://github.com/visionmedia/send/pull/59)\n- [GitHub Commit](https://github.com/visionmedia/send/commit/9c6ca9b2c0b880afd3ff91ce0d211213c5fa5f9a)\n",
        "disclosureTime": "2014-09-12T05:06:33Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.8.4"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:send:20140912",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-SEND-10022"
          ],
          "CVE": [
            "CVE-2014-6394"
          ],
          "CWE": [
            "CWE-23"
          ],
          "NSP": [
            32
          ]
        },
        "language": "js",
        "modificationTime": "2019-05-30T14:12:44.213989Z",
        "moduleName": "send",
        "packageManager": "npm",
        "packageName": "send",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:send:20140912:0",
            "modificationTime": "2019-12-03T11:40:45.745668Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/send/20140912/send_20140912_0_0_9c6ca9b2c0b880afd3ff91ce0d211213c5fa_snyk.patch"
            ],
            "version": "< 0.8.4 >=0.7.3"
          }
        ],
        "proprietary": false,
        "publicationTime": "2014-09-12T05:06:33Z",
        "references": [
          {
            "title": "GitHub Commit",
            "url": "https://github.com/visionmedia/send/commit/9c6ca9b2c0b880afd3ff91ce0d211213c5fa5f9a"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/visionmedia/send/pull/59"
          }
        ],
        "semver": {
          "vulnerable": [
            "< 0.8.4"
          ]
        },
        "severity": "medium",
        "title": "Directory Traversal",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "express@4.2.0",
          "serve-static@1.1.0",
          "send@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "send",
        "version": "0.3.0"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
        "alternativeIds": [
          "SNYK-JS-SEND-10056"
        ],
        "creationTime": "2015-11-06T02:09:36.183000Z",
        "credit": [
          "Dinis Cruz"
        ],
        "cvssScore": 5.3,
        "description": "## Overview\r\n[Send](https://www.npmjs.com/package/send) is a library for streaming files from the file system as an http response. It supports partial responses (Ranges), conditional-GET negotiation, high test coverage, and granular events which may be leveraged to take appropriate actions in your application or framework.\r\n\r\nAffected versions of this package are vulnerable to a Root Path Disclosure.\r\n\r\n## Remediation\r\nUpgrade `send` to version 0.11.1 or higher. \r\n\r\n## References\r\n- [GitHub PR](https://github.com/pillarjs/send/pull/70)\r\n- [GitHub Commit](https://github.com/pillarjs/send/commit/98a5b89982b38e79db684177cf94730ce7fc7aed)\r\n- [GitHub History](https://github.com/expressjs/serve-static/blob/master/HISTORY.md#181--2015-01-20)\r\n- [Expressjs Security Update](http://expressjs.com/advanced/security-updates.html)",
        "disclosureTime": "2015-11-03T07:12:20Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "0.11.1"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:send:20151103",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-SEND-10056"
          ],
          "CVE": [
            "CVE-2015-8859"
          ],
          "CWE": [
            "CWE-200"
          ],
          "NSP": [
            56
          ]
        },
        "language": "js",
        "modificationTime": "2019-07-31T12:04:59.303893Z",
        "moduleName": "send",
        "packageManager": "npm",
        "packageName": "send",
        "patches": [
          {
            "comments": [
              "https://github.com/pillarjs/send/commit/98a5b89982b38e79db684177cf94730ce7fc7aed",
              "https://github.com/dxa4481/send/commit/6adc607a908fb95892e39ca366222d8e2951a4a4"
            ],
            "id": "patch:npm:send:20151103:0",
            "modificationTime": "2019-12-03T11:40:45.763186Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/send/20151103/send_20151103_0_1_98a5b89982b38e79db684177cf94730ce7fc7aed.patch"
            ],
            "version": "<0.11.1 >=0.9.0"
          }
        ],
        "proprietary": false,
        "publicationTime": "2015-11-06T02:09:36Z",
        "references": [
          {
            "title": "Expressjs Security Update",
            "url": "http://expressjs.com/advanced/security-updates.html"
          },
          {
            "title": "GitHub Commit",
            "url": "https://github.com/pillarjs/send/commit/98a5b89982b38e79db684177cf94730ce7fc7aed"
          },
          {
            "title": "GitHub History",
            "url": "https://github.com/expressjs/serve-static/blob/master/HISTORY.md%23181--2015-01-20"
          },
          {
            "title": "GitHub PR",
            "url": "https://github.com/pillarjs/send/pull/70"
          }
        ],
        "semver": {
          "vulnerable": [
            "<0.11.1"
          ]
        },
        "severity": "medium",
        "title": "Root Path Disclosure",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "express@4.2.0",
          "serve-static@1.1.0",
          "send@0.3.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "send",
        "version": "0.3.0"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:L/A:N",
        "alternativeIds": [
          "SNYK-JS-SERVESTATIC-10032"
        ],
        "creationTime": "2015-01-13T12:50:48Z",
        "credit": [
          "Pierre-Élie Fauché"
        ],
        "cvssScore": 3.1,
        "description": "## Overview\r\n\r\nWhen using serve-static middleware version < 1.7.2 and it's configured to mount at the root, it creates an open redirect on the site.\r\n\r\n_Source: [Node Security Project](https://nodesecurity.io/advisories/35)_\r\n\r\n## Details\r\n\r\nFor example:\r\n\r\nIf a user visits `http://example.com//www.google.com/%2e%2e` they will be redirected to `//www.google.com/%2e%2e`, which some browsers interpret as `http://www.google.com/%2e%2e`.\r\n\r\n## Remediation\r\n\r\n  * Update to version 1.7.2 or greater (or 1.6.5 if sticking to the 1.6.x line).\r\n  * Disable redirects if not using the feature with 'redirect: false' option and cannot upgrade.\r\n\r\n## References\r\n\r\n- https://github.com/expressjs/serve-static/issues/26\r\n- https://www.owasp.org/index.php/Open_redirect",
        "disclosureTime": "2015-01-13T12:50:48Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "1.6.5",
          "1.7.2"
        ],
        "functions": [],
        "functions_new": [],
        "id": "npm:serve-static:20150113",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-SERVESTATIC-10032"
          ],
          "CVE": [
            "CVE-2015-1164"
          ],
          "CWE": [
            "CWE-601"
          ],
          "NSP": [
            35
          ]
        },
        "language": "js",
        "modificationTime": "2020-04-06T16:45:16.539079Z",
        "moduleName": "serve-static",
        "packageManager": "npm",
        "packageName": "serve-static",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:serve-static:20150113:0",
            "modificationTime": "2019-12-03T11:40:45.749791Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/serve-static/20150113/serve-static_20150113_0_0_0399e399935bab99530d6926094b4451438c2d50_snyk.patch"
            ],
            "version": ">=1.7.0 <1.7.2"
          }
        ],
        "proprietary": false,
        "publicationTime": "2015-01-13T12:50:48Z",
        "references": [
          {
            "title": "GitHub Issue",
            "url": "https://github.com/expressjs/serve-static/issues/26"
          }
        ],
        "semver": {
          "vulnerable": [
            "<1.6.5",
            ">=1.7.0 <1.7.2"
          ]
        },
        "severity": "low",
        "title": "Open Redirect",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "express@4.2.0",
          "serve-static@1.1.0"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": false,
        "isPinnable": false,
        "name": "serve-static",
        "version": "1.1.0"
      },
      {
        "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:L/I:L/A:L",
        "alternativeIds": [
          "SNYK-JS-UGLIFYJS-10041"
        ],
        "creationTime": "2015-08-24T09:29:10Z",
        "credit": [
          "Tom MacWright"
        ],
        "cvssScore": 8.3,
        "description": "## Overview\r\n[`uglify-js`](http://npmjs.com/package/uglify-js) is a JavaScript parser, minifier, compressor and beautifier toolkit.\r\n\r\n[Tom MacWright](https://github.com/mishoo/UglifyJS2/issues/751) discovered that UglifyJS versions 2.4.23 and earlier are affected by a vulnerability which allows a specially crafted Javascript file to have altered functionality after minification. This bug was [demonstrated](https://zyan.scripts.mit.edu/blog/backdooring-js/) by [Yan](https://twitter.com/bcrypt) to allow potentially malicious code to be hidden within secure code, activated by minification.\r\n\r\n### Details\r\nIn Boolean algebra, DeMorgan's laws describe the relationships between conjunctions (`&&`), disjunctions (`||`) and negations (`!`).\r\nIn Javascript form, they state that:\r\n```savascript\r\n !(a && b) === (!a) || (!b)\r\n !(a || b) === (!a) && (!b)\r\n```\r\n\r\nThe law does not hold true when one of the values is not a boolean however.\r\n\r\nVulnerable versions of UglifyJS do not account for this restriction, and erroneously apply the laws to a statement if it can be reduced in length by it.\r\n\r\nConsider this authentication function:\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft =\r\n        !!config && // config object exists\r\n        !!user.token && // user object has a token\r\n        !user.token.invalidated && // token is not explicitly invalidated\r\n        !config.uninitialized && // config is initialized\r\n        !config.ignoreTimestamps && // don't ignore timestamps\r\n        getTimeLeft(user.token.expiry); // > 0 if expiration is in the future\r\n\r\n    // The token must not be expired\r\n    return timeLeft > 0;\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n  return expiry - getSystemTime();\r\n}\r\n```\r\nWhen minified with a vulnerable version of UglifyJS, it will produce the following insecure output, where a token will never expire:\r\n\r\n( Formatted for readability )\r\n\r\n```javascript\r\nfunction isTokenValid(user) {\r\n    var timeLeft = !(                       // negation\r\n        !config                             // config object does not exist\r\n        || !user.token                      // user object does not have a token\r\n        || user.token.invalidated           // token is explicitly invalidated\r\n        || config.uninitialized             // config isn't initialized\r\n        || config.ignoreTimestamps          // ignore timestamps\r\n        || !getTimeLeft(user.token.expiry)  // > 0 if expiration is in the future\r\n    );\r\n    return timeLeft > 0\r\n}\r\n\r\nfunction getTimeLeft(expiry) {\r\n    return expiry - getSystemTime()\r\n}\r\n```\r\n\r\n## Remediation\r\nUpgrade UglifyJS to version `2.4.24` or higher.\r\n\r\n## References\r\n- [Blog Post](https://zyan.scripts.mit.edu/blog/backdooring-js/)\r\n- [GitHub Issue](https://github.com/mishoo/UglifyJS2/issues/751)",
        "disclosureTime": "2015-08-24T09:29:10Z",
        "exploit": "Not Defined",
        "fixedIn": [
          "2.4.24"
        ],
        "functions": [
          {
            "functionId": {
              "className": null,
              "filePath": "lib/compress.js",
              "functionName": "Compressor"
            },
            "version": [
              ">=2.2.0 <2.4.24"
            ]
          }
        ],
        "functions_new": [
          {
            "functionId": {
              "filePath": "lib/compress.js",
              "functionName": "Compressor"
            },
            "version": [
              ">=2.2.0 <2.4.24"
            ]
          }
        ],
        "id": "npm:uglify-js:20150824",
        "identifiers": {
          "ALTERNATIVE": [
            "SNYK-JS-UGLIFYJS-10041"
          ],
          "CVE": [
            "CVE-2015-8857"
          ],
          "CWE": [
            "CWE-95"
          ],
          "NSP": [
            39
          ]
        },
        "language": "js",
        "modificationTime": "2019-04-30T15:19:20.298795Z",
        "moduleName": "uglify-js",
        "packageManager": "npm",
        "packageName": "uglify-js",
        "patches": [
          {
            "comments": [],
            "id": "patch:npm:uglify-js:20150824:0",
            "modificationTime": "2019-12-03T11:40:45.756528Z",
            "urls": [
              "https://snyk-patches.s3.amazonaws.com/npm/uglify-js/20150824/uglify-js_20150824_0_0_905b6011784ca60d41919ac1a499962b7c1d4b02_snyk.patch"
            ],
            "version": "<= 2.4.23 >2.0.0"
          }
        ],
        "proprietary": false,
        "publicationTime": "2015-08-24T09:29:10Z",
        "references": [
          {
            "title": "Blog Post",
            "url": "https://zyan.scripts.mit.edu/blog/backdooring-js/"
          },
          {
            "title": "GitHub Issue",
            "url": "https://github.com/mishoo/UglifyJS2/issues/751"
          }
        ],
        "semver": {
          "vulnerable": [
            ">=2.2.0 <2.4.24"
          ]
        },
        "severity": "high",
        "title": "Improper minification of non-boolean comparisons",
        "from": [
          "test-app@1.0.0",
          "mock2easy@0.0.24",
          "jade@1.3.1",
          "transformers@2.1.0",
          "uglify-js@2.2.5"
        ],
        "upgradePath": [],
        "isUpgradable": false,
        "isPatchable": true,
        "isPinnable": false,
        "name": "uglify-js",
        "version": "2.2.5"
      }
    ],
    "upgrade": {},
    "patch": {
      "npm:mime:20170907": {
        "paths": [
          {
            "mock2easy > body-parser > type-is > mime": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          },
          {
            "mock2easy > express > type-is > mime": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          },
          {
            "mock2easy > express > accepts > mime": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          },
          {
            "mock2easy > express > send > mime": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          },
          {
            "mock2easy > express > serve-static > send > mime": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          }
        ]
      },
      "npm:ms:20170412": {
        "paths": [
          {
            "mock2easy > browserify-middleware > ms": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          },
          {
            "mock2easy > browserify-middleware > prepare-response > ms": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          }
        ]
      },
      "npm:negotiator:20160616": {
        "paths": [
          {
            "mock2easy > express > accepts > negotiator": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          }
        ]
      },
      "npm:qs:20140806-1": {
        "paths": [
          {
            "mock2easy > body-parser > qs": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          },
          {
            "mock2easy > express > qs": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          }
        ]
      },
      "npm:uglify-js:20151024": {
        "paths": [
          {
            "mock2easy > jade > transformers > uglify-js": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          },
          {
            "mock2easy > jade > constantinople > uglify-js": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          },
          {
            "mock2easy > jade > with > uglify-js": {
              "patched": "2020-08-18T10:01:50.204Z"
            }
          }
        ]
      }
    },
    "ignore": {},
    "pin": {}
  },
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 21,
  "projectName": "test-app",
  "displayTargetFile": "package-lock.json",
  "path": "/Users/aleksandr/Temp/snyk-test-projects/npm/example1"
}
